[
  {
    "__docId__": 0,
    "kind": "file",
    "name": "src/app-main.js",
    "content": "const React = require('react');\r\nconst ReactDOM = require('react-dom');\r\nconst moment = require('moment');\r\n\r\nvar AutoComposerLogic = require('./autocomposer-logic');\r\nvar AcLogic = new AutoComposerLogic.AutoComposerLogic();\r\n\r\nvar AutoComposerMelody = require('./autocomposer-melody');\r\nvar AcMelody = new AutoComposerMelody.AutoComposerMelody();\r\n\r\nvar acMidi = require('./autocomposer-midi');\r\nvar AcMidi = new acMidi.AutoComposerMidi();\r\n\r\nvar AcButton = require('./react/ac-button');\r\nvar AcToggleButton = require('./react/ac-toggle-button');\r\nvar AcTextArea = require('./react/ac-textarea');\r\nvar StatusOutput = require('./react/status-output')\r\n\r\nvar HelpPanel = require('./react/help-panel');\r\nvar DebugPanel = require('./react/debug-panel');\r\nvar OutputPanel = require('./react/output-panel');\r\nvar ControlPanel = require('./react/control-panel');\r\n\r\n\r\n\r\nfunction AcInputException(message) {\r\n   this.message = message;\r\n   this.name = 'AcInputException';\r\n}\r\n\r\n\r\n\r\n/**\r\n* The core React component for the web app.\r\n*/\r\nclass AutoComposer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    /**\r\n    * @type {Object} - Data store. Any changes to this data store will not cause an update.\r\n    */\r\n    this.store = {\r\n      melodies: [],\r\n      chordProgressionClean: \"\",\r\n      chordProgressionPlaceholder: AcLogic.INITIAL_PROGRESSION,\r\n      RESPONSIVE_BREAKPOINT_PHONE: 500,\r\n      RESPONSIVE_BREAKPOINT_TABLET: 768\r\n    };\r\n\r\n    /**\r\n    * @type {Object} - Component state. Changes to this will eventually trigger a render.\r\n    */\r\n    this.state = {\r\n      showHelp: false,\r\n      showControls: false,\r\n      showOutput: false,\r\n\r\n      debugMode: false,\r\n      controlsDisabled: true, // While this is a mess, no need to show it.\r\n\r\n      chordProgressionRaw: \"\",\r\n      chordProgressionChanged: false,\r\n\r\n      // This becomes true whenever we have a chord progression change, and the correct button is clicked.\r\n      // Returns to false after output finishes rendering\r\n      allowMelodyGeneration: \"\",\r\n      melodyLoaded: false,\r\n\r\n      isOnSupportedDevice: this._isOnSupportedDevice(),\r\n      isOnTablet: this._isOnTablet()\r\n    };\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.generateMelodies = this.generateMelodies.bind(this);\r\n    this.outputFinishCallback = this.outputFinishCallback.bind(this);\r\n    this.callbackChangeState = this.callbackChangeState.bind(this);\r\n    this._resizeHandler = this._resizeHandler.bind(this);\r\n    this.loadMusic = this.loadMusic.bind(this);\r\n\r\n    this.playMelody = this.playMelody.bind(this);\r\n    this.playMelodySolo = this.playMelodySolo.bind(this);\r\n    this.stopMusic = this.stopMusic.bind(this);\r\n    this.downloadMidi = this.downloadMidi.bind(this);\r\n  }\r\n\r\n  /**\r\n  * Checks the device/browser. Returns true if the browser is supported.\r\n  * Expected to run on loading the app.\r\n  */\r\n  _isOnSupportedDevice() {\r\n    var ua = navigator.userAgent;\r\n    // token explanation\r\n    // android - not supporting mobile\r\n    // trident - IE rendering engine. IE does not support the class JS keyword. Which is all over this codebase.\r\n    var isSupportedDevice = ua.search(/android|trident/i) == -1;\r\n    return isSupportedDevice;\r\n  }\r\n\r\n  /**\r\n  * Checks to see if the app should use a Tablet layout.\r\n  * Expected to run on loading the app, and when it resizes\r\n  */\r\n  _isOnTablet() {\r\n    if(window.innerWidth > this.store.RESPONSIVE_BREAKPOINT_PHONE && window.innerWidth <= this.store.RESPONSIVE_BREAKPOINT_TABLET) {\r\n      return true;\r\n    } else {\r\n      return false\r\n    }\r\n  }\r\n\r\n  /**\r\n  * Handler for browser resize event.\r\n  */\r\n  _resizeHandler() {\r\n    if(this._isOnTablet() && !this.state.isOnTablet) {\r\n      // state transition: non-tablet VW to a tablet VW\r\n      this.setState({isOnTablet: true});\r\n    } else if (!this._isOnTablet() && this.state.isOnTablet) {\r\n      // state transition: tablet VW to a non-tablet VW\r\n      this.setState({isOnTablet: false});\r\n    }\r\n  }\r\n\r\n  /**\r\n  * Add event listener\r\n  */\r\n  componentDidMount() {\r\n    window.addEventListener(\"resize\", this._resizeHandler);\r\n  }\r\n\r\n  /**\r\n  * Remove event listener\r\n  */\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\"resize\", this._resizeHandler);\r\n  }\r\n\r\n  _sendStatusUpdate(message) {\r\n    var updateEvent = new CustomEvent('statusUpdate', {detail: message});\r\n    document.body.dispatchEvent(updateEvent);\r\n  }\r\n\r\n  /**\r\n  * Changes app state. Meant to be called from child components\r\n  * @param {string} stateKey - App state to change\r\n  * @param {number|string|Object} newState - Assigns this to the state\r\n  * @param {boolean} [useDataStore] - If true, the data store is changed instead of the state object.\r\n  */\r\n  callbackChangeState(stateKey, newState, useDataStore) {\r\n    if(useDataStore) {\r\n      this.store[stateKey] = newState;\r\n    } else {\r\n      var stateObj = function() {\r\n        var returnObj = {};\r\n\r\n        returnObj[stateKey] = newState;\r\n\r\n        return returnObj;\r\n      }.bind(this)();\r\n\r\n      this.setState(stateObj);\r\n    }\r\n  }\r\n\r\n  /**\r\n  * Changes app state. Meant to be called from child components.\r\n  * Older function, compared to callbackChangeState()\r\n  * @param {Object} event - React event\r\n  */\r\n  handleChange(event) {\r\n    var stateObj = function() {\r\n      var stateKey = this.target.dataset[\"stateKey\"];\r\n      var returnObj = {};\r\n\r\n      if(this.target.type === \"checkbox\") {\r\n        returnObj[stateKey] = this.target.checked;\r\n      } else if(this.target.type === \"button\") {\r\n        returnObj[stateKey] = this.target.dataset[\"currentState\"] === \"true\";\r\n      } else {\r\n        returnObj[stateKey] = this.target.value;\r\n\r\n        if(stateKey === \"chordProgressionRaw\") {\r\n          returnObj[\"chordProgressionChanged\"] = true;\r\n        }\r\n      }\r\n\r\n      return returnObj;\r\n    }.bind(event)();\r\n\r\n    this.setState(stateObj);\r\n  }\r\n\r\n  /**\r\n  * Loads melody data into the App. Meant to be used as a callback from the results table.\r\n  * @param {Object} event - React event\r\n  */\r\n  loadMusic(event) {\r\n    var melodyString = event.currentTarget.dataset[\"payload\"];\r\n    var melodiesData = melodyString.split(\";\");\r\n\r\n    var melody1 = melodiesData[0].split(\",\");\r\n    var melody2 = melodiesData[1].split(\",\");\r\n    var melody3 = melodiesData[2].split(\",\");\r\n\r\n    var melodies = [melody1, melody2, melody3];\r\n    this.store.melodies = melodies;\r\n    this.setState({melodyLoaded: true});\r\n\r\n    var newSelectionEvent = new Event(\"newSelection\");\r\n    document.body.dispatchEvent(newSelectionEvent);\r\n  }\r\n\r\n  /**\r\n  * Generates the melodies for the given chord progression.\r\n  * @param {Object} event - React event\r\n  */\r\n  generateMelodies(event) {\r\n    var chordProgression = this.state.chordProgressionRaw.trim().split(\" \");\r\n\r\n    if(!this.state.chordProgressionChanged || this.state.chordProgressionRaw.trim() === this.store.chordProgressionClean) {\r\n      // Chord progression hasn't changed. No need to continue.\r\n      console.debug(\"[AutoComposer.generateMelodies()] Chord progression hasn't changed. No generation for you.\");\r\n      return;\r\n    }\r\n\r\n    this.store.chordProgressionClean = this.state.chordProgressionRaw.trim();\r\n\r\n    try {\r\n      if(this.state.chordProgressionRaw == null || this.state.chordProgressionRaw == \"\") {\r\n        throw new AcInputException('Chord input is empty!');\r\n      }\r\n\r\n      chordProgression.forEach(function(currentChordInput) {\r\n        if(!AcLogic.isValidText(currentChordInput)) {\r\n          throw new AcInputException('Chord input \\'' + currentChordInput + '\\' is not formatted properly! You should check the chord dictionary in the Help! section.');\r\n        }\r\n      });\r\n\r\n      if(chordProgression.length < 2) {\r\n        throw new AcInputException('You need to enter more chords. Two chords in a row is a completely valid input.');\r\n      }\r\n\r\n      this._sendStatusUpdate(\"Generating melodies...\");\r\n      this.setState({showOutput: true, allowMelodyGeneration: true, melodyLoaded: false, showHelp: false});\r\n      this.store.melodies = [];\r\n\r\n\r\n      var newSelectionEvent = new Event(\"newSelection\");\r\n      document.body.dispatchEvent(newSelectionEvent);\r\n    } catch(exc) {\r\n      console.warn(\"[AutoComposer.generateMelodies()] \" + exc.message + \"\\nError Type = \" + exc.name);\r\n      this._sendStatusUpdate(\"[ERROR] \" + exc.message);\r\n    }\r\n  }\r\n\r\n  /**\r\n  * Plays the loaded melody\r\n  * @param {Object} event - React event\r\n  */\r\n  playMelody(event) {\r\n    if(this.store.melodies.length > 0) {\r\n      AcMidi.playMelodyWithAccompaniment(this.store.melodies[0], this.store.melodies[1], this.store.melodies[2]);\r\n    }\r\n  }\r\n\r\n  /**\r\n  * Plays the loaded melody by itself\r\n  * @param {Object} event - React event\r\n  */\r\n  playMelodySolo(event) {\r\n    if(this.store.melodies.length > 0) {\r\n      AcMidi.playMelodySolo(this.store.melodies[0]);\r\n    }\r\n  }\r\n\r\n  /**\r\n  * Stops all music currently playing.\r\n  * @param {Object} event - React event\r\n  */\r\n  stopMusic(event) {\r\n    AcMidi.stopPlayback();\r\n  }\r\n\r\n  /**\r\n  * Creates and sends MIDI data to the user.\r\n  * @param {Object} event - React event\r\n  */\r\n  downloadMidi(event) {\r\n    if(this.store.melodies.length > 0) {\r\n      //download MIDI file\r\n      var dataString = AcMidi.buildMelodyMidiWithAccompaniment(this.store.melodies[0], this.store.melodies[1], this.store.melodies[2]);\r\n      var timestamp = moment().format(\"YYMMDDHHmmss\");\r\n      var fileName = \"autocomposer_\" + timestamp + \"_\" + this.state.chordProgressionRaw.replace(/\\s+/g, \"-\");\r\n      download(dataString, fileName, \"audio/midi\");\r\n    }\r\n  }\r\n\r\n  /**\r\n  * Callback that runs when output panel is finished rendering.\r\n  * Prevents melody generation until the user enters a new progression.\r\n  * @param {Object} event - React event\r\n  */\r\n  outputFinishCallback() {\r\n    this.setState({allowMelodyGeneration: false, chordProgressionChanged: false});\r\n  }\r\n\r\n  render() {\r\n    var chordProgressionArray = this.store.chordProgressionClean.split(\" \");\r\n    var rootLayoutClass = \"root-panel\";\r\n    rootLayoutClass += this.state.isOnTablet ? \" layout-tablet\" : \" layout-non-tablet\";\r\n\r\n    if(this.state.isOnSupportedDevice) {\r\n      return (\r\n        <div id=\"app-container\" className={rootLayoutClass}>\r\n          <div id=\"main-control-panel\" className=\"ac-panel\">\r\n\r\n            <div className=\"panel-row\">\r\n              <div className=\"ac-control-wrapper flex-lg\">\r\n                <h1 id=\"main-title\">AutoComposer</h1>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"panel-row\">\r\n              <p>\r\n                This is a prototype for a program that automatically writes music. Click the <i className=\"fa fa-question\"></i> button to get started.\r\n                For more info, check out the <a href=\"https://github.com/rjsalvadorr/autocomposer-melody/wiki\" target=\"_blank\">project wiki</a> and <a href=\"https://github.com/rjsalvadorr/autocomposer-melody\" target=\"_blank\">repository</a>.\r\n              </p>\r\n            </div>\r\n\r\n            <div className=\"panel-row has-labels\">\r\n              <AcTextArea inputKey=\"chordProgressionRaw\" addClass=\"double-height\" value={this.state.chordProgressionRaw} placeholder={this.store.chordProgressionPlaceholder} onChange={this.handleChange} />\r\n              <AcButton inputKey=\"generateMelodies\" inputLabel=\"Generate\" wrapperAddClass=\"square\" addClass=\"double-height blue\" onClick={this.generateMelodies} isActive={!this.state.chordProgressionChanged}/>\r\n            </div>\r\n\r\n            <div className=\"panel-row\">\r\n              <AcButton inputKey=\"generateMelodies\" icon=\"play\" addClass=\"green\" wrapperAddClass=\"flex-lg\" onClick={this.playMelody} disabled={!this.state.melodyLoaded}/>\r\n              <AcButton inputKey=\"generateMelodies\" icon=\"play\" addClass=\"green\" inputLabel=\"Solo\" wrapperAddClass=\"flex-sm\" onClick={this.playMelodySolo} disabled={!this.state.melodyLoaded}/>\r\n              <AcButton inputKey=\"generateMelodies\" icon=\"stop\" addClass=\"red\" wrapperAddClass=\"flex-sm\" onClick={this.stopMusic} disabled={!this.state.melodyLoaded}/>\r\n              <AcButton inputKey=\"generateMelodies\" icon=\"download\" wrapperAddClass=\"flex-sm\" onClick={this.downloadMidi} disabled={!this.state.melodyLoaded}/>\r\n            </div>\r\n\r\n            <div className=\"panel-row\">\r\n              <AcToggleButton inputKey=\"showHelp\" icon=\"question\" wrapperAddClass=\"flex-sm\" isActive={this.state.showHelp} onClickHandler={this.callbackChangeState} />\r\n              <AcToggleButton inputKey=\"showControls\" icon=\"cog\" wrapperAddClass=\"flex-sm\" initialState={this.state.showControls} onClickHandler={this.callbackChangeState} disabled={this.state.controlsDisabled} />\r\n            </div>\r\n\r\n            <div className=\"panel-row\">\r\n              <StatusOutput inputKey=\"status-output\" value=\"status output...\" />\r\n            </div>\r\n\r\n            <DebugPanel isHidden={!this.state.debugMode} debugData={JSON.stringify(this.state, null, 2)}/>\r\n          </div>\r\n\r\n          <ControlPanel isShown={this.state.showControls} />\r\n\r\n          <HelpPanel isShown={this.state.showHelp} />\r\n\r\n          <OutputPanel isShown={this.state.showOutput} chordProgression={chordProgressionArray} allowMelodyGeneration={this.state.allowMelodyGeneration} outputCallback={this.outputFinishCallback} loadMelody={this.loadMusic} />\n\n          <div id=\"not-supported-panel\" className=\"ac-panel\">\r\n            <h1>Where's the AutoComposer?!</h1>\r\n            <p>You're seeing this because your browser's window size is too small, or you're using a device that's not supported by the app.</p>\r\n          </div>\r\n\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div id=\"app-container\" className=\"root-panel\">\r\n          <div id=\"not-supported-panel\" className=\"ac-panel\">\r\n            <h1>Where's the AutoComposer?!</h1>\r\n            <p>You're seeing this because your browser's window size is too small, or you're using a device that's not supported by the app.</p>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nReactDOM.render(<AutoComposer />, document.getElementById('react-root'));\r\n",
    "static": true,
    "longname": "src/app-main.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1,
    "kind": "variable",
    "name": "React",
    "memberof": "src/app-main.js",
    "static": true,
    "longname": "src/app-main.js~React",
    "access": null,
    "export": false,
    "importPath": "autocomposer-melody/src/app-main.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2,
    "kind": "variable",
    "name": "ReactDOM",
    "memberof": "src/app-main.js",
    "static": true,
    "longname": "src/app-main.js~ReactDOM",
    "access": null,
    "export": false,
    "importPath": "autocomposer-melody/src/app-main.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3,
    "kind": "variable",
    "name": "moment",
    "memberof": "src/app-main.js",
    "static": true,
    "longname": "src/app-main.js~moment",
    "access": null,
    "export": false,
    "importPath": "autocomposer-melody/src/app-main.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 4,
    "kind": "variable",
    "name": "AutoComposerLogic",
    "memberof": "src/app-main.js",
    "static": true,
    "longname": "src/app-main.js~AutoComposerLogic",
    "access": null,
    "export": false,
    "importPath": "autocomposer-melody/src/app-main.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 5,
    "kind": "variable",
    "name": "AcLogic",
    "memberof": "src/app-main.js",
    "static": true,
    "longname": "src/app-main.js~AcLogic",
    "access": null,
    "export": false,
    "importPath": "autocomposer-melody/src/app-main.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 6,
    "kind": "variable",
    "name": "AutoComposerMelody",
    "memberof": "src/app-main.js",
    "static": true,
    "longname": "src/app-main.js~AutoComposerMelody",
    "access": null,
    "export": false,
    "importPath": "autocomposer-melody/src/app-main.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 7,
    "kind": "variable",
    "name": "AcMelody",
    "memberof": "src/app-main.js",
    "static": true,
    "longname": "src/app-main.js~AcMelody",
    "access": null,
    "export": false,
    "importPath": "autocomposer-melody/src/app-main.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 8,
    "kind": "variable",
    "name": "acMidi",
    "memberof": "src/app-main.js",
    "static": true,
    "longname": "src/app-main.js~acMidi",
    "access": null,
    "export": false,
    "importPath": "autocomposer-melody/src/app-main.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 9,
    "kind": "variable",
    "name": "AcMidi",
    "memberof": "src/app-main.js",
    "static": true,
    "longname": "src/app-main.js~AcMidi",
    "access": null,
    "export": false,
    "importPath": "autocomposer-melody/src/app-main.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 10,
    "kind": "variable",
    "name": "AcButton",
    "memberof": "src/app-main.js",
    "static": true,
    "longname": "src/app-main.js~AcButton",
    "access": null,
    "export": false,
    "importPath": "autocomposer-melody/src/app-main.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 11,
    "kind": "variable",
    "name": "AcToggleButton",
    "memberof": "src/app-main.js",
    "static": true,
    "longname": "src/app-main.js~AcToggleButton",
    "access": null,
    "export": false,
    "importPath": "autocomposer-melody/src/app-main.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 12,
    "kind": "variable",
    "name": "AcTextArea",
    "memberof": "src/app-main.js",
    "static": true,
    "longname": "src/app-main.js~AcTextArea",
    "access": null,
    "export": false,
    "importPath": "autocomposer-melody/src/app-main.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 13,
    "kind": "variable",
    "name": "StatusOutput",
    "memberof": "src/app-main.js",
    "static": true,
    "longname": "src/app-main.js~StatusOutput",
    "access": null,
    "export": false,
    "importPath": "autocomposer-melody/src/app-main.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 14,
    "kind": "variable",
    "name": "HelpPanel",
    "memberof": "src/app-main.js",
    "static": true,
    "longname": "src/app-main.js~HelpPanel",
    "access": null,
    "export": false,
    "importPath": "autocomposer-melody/src/app-main.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 15,
    "kind": "variable",
    "name": "DebugPanel",
    "memberof": "src/app-main.js",
    "static": true,
    "longname": "src/app-main.js~DebugPanel",
    "access": null,
    "export": false,
    "importPath": "autocomposer-melody/src/app-main.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 16,
    "kind": "variable",
    "name": "OutputPanel",
    "memberof": "src/app-main.js",
    "static": true,
    "longname": "src/app-main.js~OutputPanel",
    "access": null,
    "export": false,
    "importPath": "autocomposer-melody/src/app-main.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 17,
    "kind": "variable",
    "name": "ControlPanel",
    "memberof": "src/app-main.js",
    "static": true,
    "longname": "src/app-main.js~ControlPanel",
    "access": null,
    "export": false,
    "importPath": "autocomposer-melody/src/app-main.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 18,
    "kind": "function",
    "name": "AcInputException",
    "memberof": "src/app-main.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/app-main.js~AcInputException",
    "access": null,
    "export": false,
    "importPath": "autocomposer-melody/src/app-main.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 19,
    "kind": "class",
    "name": "AutoComposer",
    "memberof": "src/app-main.js",
    "static": true,
    "longname": "src/app-main.js~AutoComposer",
    "access": null,
    "export": false,
    "importPath": "autocomposer-melody/src/app-main.js",
    "importStyle": null,
    "description": "The core React component for the web app.",
    "lineNumber": 36,
    "interface": false,
    "extends": [
      "React~React.Component"
    ]
  },
  {
    "__docId__": 20,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/app-main.js~AutoComposer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/app-main.js~AutoComposer#constructor",
    "access": null,
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 21,
    "kind": "member",
    "name": "store",
    "memberof": "src/app-main.js~AutoComposer",
    "static": false,
    "longname": "src/app-main.js~AutoComposer#store",
    "access": null,
    "description": "",
    "lineNumber": 43,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 22,
    "kind": "member",
    "name": "state",
    "memberof": "src/app-main.js~AutoComposer",
    "static": false,
    "longname": "src/app-main.js~AutoComposer#state",
    "access": null,
    "description": "",
    "lineNumber": 54,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 23,
    "kind": "member",
    "name": "handleChange",
    "memberof": "src/app-main.js~AutoComposer",
    "static": false,
    "longname": "src/app-main.js~AutoComposer#handleChange",
    "access": null,
    "description": null,
    "lineNumber": 74,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 24,
    "kind": "member",
    "name": "generateMelodies",
    "memberof": "src/app-main.js~AutoComposer",
    "static": false,
    "longname": "src/app-main.js~AutoComposer#generateMelodies",
    "access": null,
    "description": null,
    "lineNumber": 75,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 25,
    "kind": "member",
    "name": "outputFinishCallback",
    "memberof": "src/app-main.js~AutoComposer",
    "static": false,
    "longname": "src/app-main.js~AutoComposer#outputFinishCallback",
    "access": null,
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 26,
    "kind": "member",
    "name": "callbackChangeState",
    "memberof": "src/app-main.js~AutoComposer",
    "static": false,
    "longname": "src/app-main.js~AutoComposer#callbackChangeState",
    "access": null,
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 27,
    "kind": "member",
    "name": "_resizeHandler",
    "memberof": "src/app-main.js~AutoComposer",
    "static": false,
    "longname": "src/app-main.js~AutoComposer#_resizeHandler",
    "access": null,
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 28,
    "kind": "member",
    "name": "loadMusic",
    "memberof": "src/app-main.js~AutoComposer",
    "static": false,
    "longname": "src/app-main.js~AutoComposer#loadMusic",
    "access": null,
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 29,
    "kind": "member",
    "name": "playMelody",
    "memberof": "src/app-main.js~AutoComposer",
    "static": false,
    "longname": "src/app-main.js~AutoComposer#playMelody",
    "access": null,
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 30,
    "kind": "member",
    "name": "playMelodySolo",
    "memberof": "src/app-main.js~AutoComposer",
    "static": false,
    "longname": "src/app-main.js~AutoComposer#playMelodySolo",
    "access": null,
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 31,
    "kind": "member",
    "name": "stopMusic",
    "memberof": "src/app-main.js~AutoComposer",
    "static": false,
    "longname": "src/app-main.js~AutoComposer#stopMusic",
    "access": null,
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 32,
    "kind": "member",
    "name": "downloadMidi",
    "memberof": "src/app-main.js~AutoComposer",
    "static": false,
    "longname": "src/app-main.js~AutoComposer#downloadMidi",
    "access": null,
    "description": null,
    "lineNumber": 84,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 33,
    "kind": "method",
    "name": "_isOnSupportedDevice",
    "memberof": "src/app-main.js~AutoComposer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/app-main.js~AutoComposer#_isOnSupportedDevice",
    "access": null,
    "description": "Checks the device/browser. Returns true if the browser is supported.\nExpected to run on loading the app.",
    "lineNumber": 91,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 34,
    "kind": "method",
    "name": "_isOnTablet",
    "memberof": "src/app-main.js~AutoComposer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/app-main.js~AutoComposer#_isOnTablet",
    "access": null,
    "description": "Checks to see if the app should use a Tablet layout.\nExpected to run on loading the app, and when it resizes",
    "lineNumber": 104,
    "params": [],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 35,
    "kind": "method",
    "name": "_resizeHandler",
    "memberof": "src/app-main.js~AutoComposer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/app-main.js~AutoComposer#_resizeHandler",
    "access": null,
    "description": "Handler for browser resize event.",
    "lineNumber": 115,
    "params": []
  },
  {
    "__docId__": 36,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "src/app-main.js~AutoComposer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/app-main.js~AutoComposer#componentDidMount",
    "access": null,
    "description": "Add event listener",
    "lineNumber": 128,
    "params": []
  },
  {
    "__docId__": 37,
    "kind": "method",
    "name": "componentWillUnmount",
    "memberof": "src/app-main.js~AutoComposer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/app-main.js~AutoComposer#componentWillUnmount",
    "access": null,
    "description": "Remove event listener",
    "lineNumber": 135,
    "params": []
  },
  {
    "__docId__": 38,
    "kind": "method",
    "name": "_sendStatusUpdate",
    "memberof": "src/app-main.js~AutoComposer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/app-main.js~AutoComposer#_sendStatusUpdate",
    "access": null,
    "description": null,
    "lineNumber": 139,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 39,
    "kind": "method",
    "name": "callbackChangeState",
    "memberof": "src/app-main.js~AutoComposer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/app-main.js~AutoComposer#callbackChangeState",
    "access": null,
    "description": "Changes app state. Meant to be called from child components",
    "lineNumber": 150,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "stateKey",
        "description": "App state to change"
      },
      {
        "nullable": null,
        "types": [
          "number",
          "string",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "newState",
        "description": "Assigns this to the state"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "useDataStore",
        "description": "If true, the data store is changed instead of the state object."
      }
    ]
  },
  {
    "__docId__": 40,
    "kind": "method",
    "name": "handleChange",
    "memberof": "src/app-main.js~AutoComposer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/app-main.js~AutoComposer#handleChange",
    "access": null,
    "description": "Changes app state. Meant to be called from child components.\nOlder function, compared to callbackChangeState()",
    "lineNumber": 171,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "React event"
      }
    ]
  },
  {
    "__docId__": 41,
    "kind": "method",
    "name": "loadMusic",
    "memberof": "src/app-main.js~AutoComposer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/app-main.js~AutoComposer#loadMusic",
    "access": null,
    "description": "Loads melody data into the App. Meant to be used as a callback from the results table.",
    "lineNumber": 198,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "React event"
      }
    ]
  },
  {
    "__docId__": 42,
    "kind": "method",
    "name": "generateMelodies",
    "memberof": "src/app-main.js~AutoComposer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/app-main.js~AutoComposer#generateMelodies",
    "access": null,
    "description": "Generates the melodies for the given chord progression.",
    "lineNumber": 218,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "React event"
      }
    ]
  },
  {
    "__docId__": 43,
    "kind": "method",
    "name": "playMelody",
    "memberof": "src/app-main.js~AutoComposer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/app-main.js~AutoComposer#playMelody",
    "access": null,
    "description": "Plays the loaded melody",
    "lineNumber": 261,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "React event"
      }
    ]
  },
  {
    "__docId__": 44,
    "kind": "method",
    "name": "playMelodySolo",
    "memberof": "src/app-main.js~AutoComposer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/app-main.js~AutoComposer#playMelodySolo",
    "access": null,
    "description": "Plays the loaded melody by itself",
    "lineNumber": 271,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "React event"
      }
    ]
  },
  {
    "__docId__": 45,
    "kind": "method",
    "name": "stopMusic",
    "memberof": "src/app-main.js~AutoComposer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/app-main.js~AutoComposer#stopMusic",
    "access": null,
    "description": "Stops all music currently playing.",
    "lineNumber": 281,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "React event"
      }
    ]
  },
  {
    "__docId__": 46,
    "kind": "method",
    "name": "downloadMidi",
    "memberof": "src/app-main.js~AutoComposer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/app-main.js~AutoComposer#downloadMidi",
    "access": null,
    "description": "Creates and sends MIDI data to the user.",
    "lineNumber": 289,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "React event"
      }
    ]
  },
  {
    "__docId__": 47,
    "kind": "method",
    "name": "outputFinishCallback",
    "memberof": "src/app-main.js~AutoComposer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/app-main.js~AutoComposer#outputFinishCallback",
    "access": null,
    "description": "Callback that runs when output panel is finished rendering.\nPrevents melody generation until the user enters a new progression.",
    "lineNumber": 304,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "React event"
      }
    ]
  },
  {
    "__docId__": 48,
    "kind": "method",
    "name": "render",
    "memberof": "src/app-main.js~AutoComposer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/app-main.js~AutoComposer#render",
    "access": null,
    "description": null,
    "lineNumber": 308,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 49,
    "kind": "file",
    "name": "src/autocomposer-logic.js",
    "content": "var range = require('tonal-range');\r\nvar chord = require('tonal-chord');\r\nvar note = require('tonal-note');\r\n\r\n/**\r\n * Encapsulates data and musical logic to be used by the application\r\n */\r\nclass AutoComposerLogic {\r\n  constructor() {\r\n    this.DEFAULT_LOWER_LIMIT = \"Db4\";\r\n    this.DEFAULT_UPPER_LIMIT = \"G#5\";\r\n\r\n    this.ACCOMPANIMENT_LOWER_LIMIT = \"Gb2\";\r\n    this.ACCOMPANIMENT_UPPER_LIMIT = \"C#4\";\r\n\r\n    this.BASS_LOWER_LIMIT = \"E1\";\r\n    this.BASS_UPPER_LIMIT = \"F2\";\r\n\r\n    this.INITIAL_PROGRESSION = \"G Em C D\",\r\n    this.NUM_MELODIES_LIMIT = 100; // Number of melodies that the user sees.\r\n    this.NUM_GENERATIONS_LIMIT = 100000; // Number of melody generation attempts that the program will make.\r\n    this.CHORDS_LIMIT = 4;\r\n  }\r\n\r\n  /**\r\n  * Returns all the chord types available for use.\r\n  * @return {string[]} - chord types available for use\r\n  */\r\n  getChordDictionary() {\r\n    return chord.names();\r\n  }\r\n\r\n  /**\r\n  * Filters out melodies that have a range larger than an octave.\r\n  * @param {string} melodyString - String representing the melody\r\n  * @return {boolean} - Returns false if the melody has a range larger than one octave. Returns true otherwise\r\n  */\r\n  filterMelodyRange(melodyString) {\r\n    var totalRange = range.numeric(melodyString);\r\n    var highest = Math.max.apply(null, totalRange);\r\n    var lowest = Math.min.apply(null, totalRange);\r\n\r\n    return highest - lowest <= 12;\r\n  }\r\n\r\n  /**\r\n  * Filters out melodies that are too repetitive. For our purposes, three of the same notes in a row would be too repetitive.\r\n  * Assumes a melody with at least three notes.\r\n  * @param {string} melodyString - String representing the melody\r\n  * @return {boolean} - Returns false if the melody is too repetitive\r\n  */\r\n  filterRepetition(melodyString) {\r\n    var melodyArray = melodyString.split(\" \");\r\n    var isNotRepetitive = true, ctrRepetitions = 0;\r\n\r\n    for(var i = 0; i < melodyArray.length - 1; i++) {\r\n      if(melodyArray[i] === melodyArray[i + 1]) {\r\n        // repetition found.\r\n        ctrRepetitions++;\r\n      }\r\n      if(ctrRepetitions >= 2) {\r\n        // this melody is too repetitive!\r\n        isNotRepetitive = false;\r\n        break;\r\n      }\r\n    }\r\n\r\n    return isNotRepetitive;\r\n  }\r\n    /**\r\n    * Parses text, and determines if user input represents a valid note/chord.\r\n    * @param {string} input - value given by the user\r\n    * @return {boolean} - a true value means the string can be used by the rest of the program.\r\n    */\r\n  isValidText(input) {\r\n    var isChord = chord.isKnownChord(input) ? true : false;\r\n    var isNote = note.name(input) ? true : false;\r\n\r\n    return isChord || isNote;\r\n  }\r\n\r\n    /**\r\n    * Converts ASCII accidentals to Unicode accidentals in HTML\r\n    * @param {string} input - text with ASCII accidentals\r\n    * @return {string} - text with Unicode accidentals in HTML\r\n    */\r\n  convertAsciiAccidentalsToHtml(input) {\r\n    var out = input.replace(/([A-G0-9])b/g, '$1&#9837;');\r\n    out = out.replace(/([A-G0-9])#/g, '$1&#9839;');\r\n    out = out.replace(/([A-G0-9])o/g, '$1&‌deg;');\r\n\r\n    return out;\r\n  }\r\n\r\n    /**\r\n    * Converts ASCII accidentals to Unicode accidentals\r\n    * @param {string} input - text with ASCII accidentals\r\n    * @return {string} - text with Unicode accidentals\r\n    */\r\n  convertAsciiAccidentalsToText(input) {\r\n    var out = input.replace(/([A-G0-9])b/g, '$1♭');\r\n    out = out.replace(/([A-G0-9])#/g, '$1♯');\r\n    out = out.replace(/([A-G0-9])o/g, '$1°');\r\n\r\n    return out;\r\n  }\r\n\r\n    /**\r\n    * Converts Unicode accidentals to ASCII\r\n    * @param {string} input - text with Unicode accidentals\r\n    * @return {string} - text with ASCII accidentals\r\n    */\r\n  convertAccidentalsToAscii(input) {\r\n    var out = input.replace(/([A-G0-9])♭/g, '$1b');\r\n    out = out.replace(/([A-G0-9])♯/g, '$1#');\r\n    out = out.replace(/([A-G0-9])°/g, '$1o');\r\n\r\n    return out;\r\n  }\r\n\r\n};\r\n\r\nexports.AutoComposerLogic = AutoComposerLogic;\r\n",
    "static": true,
    "longname": "src/autocomposer-logic.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 50,
    "kind": "variable",
    "name": "range",
    "memberof": "src/autocomposer-logic.js",
    "static": true,
    "longname": "src/autocomposer-logic.js~range",
    "access": null,
    "export": false,
    "importPath": "autocomposer-melody/src/autocomposer-logic.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 51,
    "kind": "variable",
    "name": "chord",
    "memberof": "src/autocomposer-logic.js",
    "static": true,
    "longname": "src/autocomposer-logic.js~chord",
    "access": null,
    "export": false,
    "importPath": "autocomposer-melody/src/autocomposer-logic.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 52,
    "kind": "variable",
    "name": "note",
    "memberof": "src/autocomposer-logic.js",
    "static": true,
    "longname": "src/autocomposer-logic.js~note",
    "access": null,
    "export": false,
    "importPath": "autocomposer-melody/src/autocomposer-logic.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 53,
    "kind": "class",
    "name": "AutoComposerLogic",
    "memberof": "src/autocomposer-logic.js",
    "static": true,
    "longname": "src/autocomposer-logic.js~AutoComposerLogic",
    "access": null,
    "export": true,
    "importPath": "autocomposer-melody/src/autocomposer-logic.js",
    "importStyle": "{AutoComposerLogic}",
    "description": "Encapsulates data and musical logic to be used by the application",
    "lineNumber": 8,
    "interface": false
  },
  {
    "__docId__": 54,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/autocomposer-logic.js~AutoComposerLogic",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/autocomposer-logic.js~AutoComposerLogic#constructor",
    "access": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 55,
    "kind": "member",
    "name": "DEFAULT_LOWER_LIMIT",
    "memberof": "src/autocomposer-logic.js~AutoComposerLogic",
    "static": false,
    "longname": "src/autocomposer-logic.js~AutoComposerLogic#DEFAULT_LOWER_LIMIT",
    "access": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 56,
    "kind": "member",
    "name": "DEFAULT_UPPER_LIMIT",
    "memberof": "src/autocomposer-logic.js~AutoComposerLogic",
    "static": false,
    "longname": "src/autocomposer-logic.js~AutoComposerLogic#DEFAULT_UPPER_LIMIT",
    "access": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 57,
    "kind": "member",
    "name": "ACCOMPANIMENT_LOWER_LIMIT",
    "memberof": "src/autocomposer-logic.js~AutoComposerLogic",
    "static": false,
    "longname": "src/autocomposer-logic.js~AutoComposerLogic#ACCOMPANIMENT_LOWER_LIMIT",
    "access": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 58,
    "kind": "member",
    "name": "ACCOMPANIMENT_UPPER_LIMIT",
    "memberof": "src/autocomposer-logic.js~AutoComposerLogic",
    "static": false,
    "longname": "src/autocomposer-logic.js~AutoComposerLogic#ACCOMPANIMENT_UPPER_LIMIT",
    "access": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 59,
    "kind": "member",
    "name": "BASS_LOWER_LIMIT",
    "memberof": "src/autocomposer-logic.js~AutoComposerLogic",
    "static": false,
    "longname": "src/autocomposer-logic.js~AutoComposerLogic#BASS_LOWER_LIMIT",
    "access": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 60,
    "kind": "member",
    "name": "BASS_UPPER_LIMIT",
    "memberof": "src/autocomposer-logic.js~AutoComposerLogic",
    "static": false,
    "longname": "src/autocomposer-logic.js~AutoComposerLogic#BASS_UPPER_LIMIT",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 61,
    "kind": "member",
    "name": "NUM_GENERATIONS_LIMIT",
    "memberof": "src/autocomposer-logic.js~AutoComposerLogic",
    "static": false,
    "longname": "src/autocomposer-logic.js~AutoComposerLogic#NUM_GENERATIONS_LIMIT",
    "access": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 62,
    "kind": "member",
    "name": "CHORDS_LIMIT",
    "memberof": "src/autocomposer-logic.js~AutoComposerLogic",
    "static": false,
    "longname": "src/autocomposer-logic.js~AutoComposerLogic#CHORDS_LIMIT",
    "access": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 63,
    "kind": "method",
    "name": "getChordDictionary",
    "memberof": "src/autocomposer-logic.js~AutoComposerLogic",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/autocomposer-logic.js~AutoComposerLogic#getChordDictionary",
    "access": null,
    "description": "Returns all the chord types available for use.",
    "lineNumber": 29,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": "chord types available for use"
    }
  },
  {
    "__docId__": 64,
    "kind": "method",
    "name": "filterMelodyRange",
    "memberof": "src/autocomposer-logic.js~AutoComposerLogic",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/autocomposer-logic.js~AutoComposerLogic#filterMelodyRange",
    "access": null,
    "description": "Filters out melodies that have a range larger than an octave.",
    "lineNumber": 38,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "melodyString",
        "description": "String representing the melody"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Returns false if the melody has a range larger than one octave. Returns true otherwise"
    }
  },
  {
    "__docId__": 65,
    "kind": "method",
    "name": "filterRepetition",
    "memberof": "src/autocomposer-logic.js~AutoComposerLogic",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/autocomposer-logic.js~AutoComposerLogic#filterRepetition",
    "access": null,
    "description": "Filters out melodies that are too repetitive. For our purposes, three of the same notes in a row would be too repetitive.\nAssumes a melody with at least three notes.",
    "lineNumber": 52,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "melodyString",
        "description": "String representing the melody"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Returns false if the melody is too repetitive"
    }
  },
  {
    "__docId__": 66,
    "kind": "method",
    "name": "isValidText",
    "memberof": "src/autocomposer-logic.js~AutoComposerLogic",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/autocomposer-logic.js~AutoComposerLogic#isValidText",
    "access": null,
    "description": "Parses text, and determines if user input represents a valid note/chord.",
    "lineNumber": 75,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "input",
        "description": "value given by the user"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "a true value means the string can be used by the rest of the program."
    }
  },
  {
    "__docId__": 67,
    "kind": "method",
    "name": "convertAsciiAccidentalsToHtml",
    "memberof": "src/autocomposer-logic.js~AutoComposerLogic",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/autocomposer-logic.js~AutoComposerLogic#convertAsciiAccidentalsToHtml",
    "access": null,
    "description": "Converts ASCII accidentals to Unicode accidentals in HTML",
    "lineNumber": 87,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "input",
        "description": "text with ASCII accidentals"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "text with Unicode accidentals in HTML"
    }
  },
  {
    "__docId__": 68,
    "kind": "method",
    "name": "convertAsciiAccidentalsToText",
    "memberof": "src/autocomposer-logic.js~AutoComposerLogic",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/autocomposer-logic.js~AutoComposerLogic#convertAsciiAccidentalsToText",
    "access": null,
    "description": "Converts ASCII accidentals to Unicode accidentals",
    "lineNumber": 100,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "input",
        "description": "text with ASCII accidentals"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "text with Unicode accidentals"
    }
  },
  {
    "__docId__": 69,
    "kind": "method",
    "name": "convertAccidentalsToAscii",
    "memberof": "src/autocomposer-logic.js~AutoComposerLogic",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/autocomposer-logic.js~AutoComposerLogic#convertAccidentalsToAscii",
    "access": null,
    "description": "Converts Unicode accidentals to ASCII",
    "lineNumber": 113,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "input",
        "description": "text with Unicode accidentals"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "text with ASCII accidentals"
    }
  },
  {
    "__docId__": 70,
    "kind": "file",
    "name": "src/autocomposer-main.js",
    "content": "\r\nclass AutoComposer {\r\n  constructor() {\r\n\r\n  }\r\n}\r\n\r\nmodule.exports = new AutoComposer.AutoComposer();\r\n",
    "static": true,
    "longname": "src/autocomposer-main.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 71,
    "kind": "class",
    "name": "AutoComposer",
    "memberof": "src/autocomposer-main.js",
    "static": true,
    "longname": "src/autocomposer-main.js~AutoComposer",
    "access": null,
    "export": true,
    "importPath": "autocomposer-melody/src/autocomposer-main.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "pseudoExport": true,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "interface": false
  },
  {
    "__docId__": 72,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/autocomposer-main.js~AutoComposer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/autocomposer-main.js~AutoComposer#constructor",
    "access": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 73,
    "kind": "variable",
    "name": "autoComposer",
    "memberof": "src/autocomposer-main.js",
    "static": true,
    "longname": "src/autocomposer-main.js~autoComposer",
    "access": null,
    "export": true,
    "importPath": "autocomposer-melody/src/autocomposer-main.js",
    "importStyle": "autoComposer",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "src/autocomposer-main.js~AutoComposer"
      ]
    }
  },
  {
    "__docId__": 74,
    "kind": "file",
    "name": "src/autocomposer-melody.js",
    "content": "var tonal = require('tonal');\r\nvar ChordUnit = require('./chord-unit');\r\nvar MelodyUnit = require('./melody-unit');\r\n\r\nvar AutoComposerLogic = require('./autocomposer-logic');\r\nvar AcLogic = new AutoComposerLogic.AutoComposerLogic();\r\n\r\n/**\r\n * Creates melodies from a given chord progression\r\n */\r\nclass AutoComposerMelody {\r\n  /**\r\n  * @param {string[]} chordProgression - array of chord symbols\r\n  * @param {string} lowerLimit - lower boundary note (in scientific notation)\r\n  * @param {string} upperLimit - upper boundary note (in scientific notation)\r\n  */\r\n  constructor(chordProgression, lowerLimit, upperLimit) {\r\n    /** @type {string[]} */\r\n    this.chordProgression = chordProgression || AcLogic.INITIAL_PROGRESSION;\r\n    /** @type {string} */\r\n    this.lowerLimit = lowerLimit || AcLogic.DEFAULT_LOWER_LIMIT;\r\n    /** @type {string} */\r\n    this.upperLimit = upperLimit || AcLogic.DEFAULT_UPPER_LIMIT;\r\n  }\r\n\r\n  _sendStatusUpdate(message) {\r\n    var updateEvent = new CustomEvent('statusUpdate', {detail: message});\r\n    document.body.dispatchEvent(updateEvent);\r\n  }\r\n\r\n    /**\r\n    * For a given note, find its lowest instance in the specified range.\r\n    * @private\r\n    * @param {string} pitch - pitch class\r\n    * @param {string} lowerLimit - note (written in scientific notation)\r\n    * @param {string} upperLimit - note (written in scientific notation)\r\n    * @return {string[]} - an array of notes (written in scientific pitch)\r\n    */\r\n  _getLowestNoteInRange(pitch, lowerLimit, upperLimit) {\r\n    var chordTonesInRange = tonal.range.pitchSet(pitch, [lowerLimit, upperLimit]);\r\n    return chordTonesInRange[0];\r\n  }\r\n\r\n    /**\r\n    * For a given array of chord tones, remove the specified pitches.\r\n    * @private\r\n    * @param {string[]} pitchArray - pitches to remove\r\n    * @param {string[]} chordTones - chord tones\r\n    * @return {string[]} - the remaining chord tones\r\n    */\r\n  _removePitchesFromChordTones(pitchArray, chordTones) {\r\n    var indexToRemove;\r\n    pitchArray.forEach(function(pitch) {\r\n      indexToRemove = chordTones.indexOf(pitch);\r\n      if (indexToRemove > -1) {\r\n        chordTones.splice(indexToRemove, 1);\r\n      }\r\n    });\r\n    return chordTones;\r\n  }\r\n\r\n    /**\r\n    * For a given MelodyUnit, get an accompaniment for it.\r\n    * @private\r\n    * @param {MelodyUnit} melodyUnit - melody that needs accompaniment\r\n    * @return {string[]} - array of strings, each representing one or more notes to play under each melodic note.\r\n    */\r\n  getAccompaniment(melodyUnit) {\r\n    // Omit root note, and maybe avoid doubling the top note as well.\r\n    var noteArray = [], chordNotes, currentChord, bassPitch, topPitch;\r\n\r\n    for(var i = 0; i < melodyUnit.chordProgression.length; i++) {\r\n      currentChord = melodyUnit.chordProgression[i];\r\n      bassPitch = tonal.chord.parse(currentChord)[\"tonic\"];\r\n      topPitch =  tonal.note.pc(melodyUnit.melodyNotes[i]);\r\n\r\n      chordNotes = tonal.chord.notes(currentChord);\r\n      chordNotes = this._removePitchesFromChordTones([bassPitch, topPitch], chordNotes);\r\n\r\n      for(var j = 0; j < chordNotes.length; j++) {\r\n        chordNotes[j] = this._getLowestNoteInRange(chordNotes[j], AcLogic.ACCOMPANIMENT_LOWER_LIMIT, AcLogic.ACCOMPANIMENT_UPPER_LIMIT);\r\n      }\r\n      noteArray.push(chordNotes.join(\" \"));\r\n    }\r\n\r\n    return noteArray;\r\n  }\r\n\r\n    /**\r\n    * For a given MelodyUnit, return a basic bass line consisting only of root notes.\r\n    * @private\r\n    * @param {MelodyUnit} melodyUnit - melody that needs a bassline\r\n    * @return {string} - string representing a bassline.\r\n    */\r\n  getBasicBassLine(melodyUnit) {\r\n    var noteArray = [], currentChord, bassPitch, bassNote;\r\n\r\n    // return all the lowest root notes for the progression.\r\n    for(var i = 0; i < melodyUnit.chordProgression.length; i++) {\r\n      currentChord = melodyUnit.chordProgression[i];\r\n      bassPitch = tonal.chord.parse(currentChord)[\"tonic\"];\r\n      bassNote = this._getLowestNoteInRange(bassPitch, AcLogic.BASS_LOWER_LIMIT, AcLogic.BASS_UPPER_LIMIT);\r\n\r\n      noteArray.push(bassNote);\r\n    }\r\n\r\n    return noteArray;\r\n  }\r\n\r\n    /**\r\n    * For a given chord, get all the chord tones between the upper and lower limits.\r\n    * @private\r\n    * @param {string} chord - chord symbol\r\n    * @param {string} lowerLimit - note (written in scientific notation)\r\n    * @param {string} upperLimit - note (written in scientific notation)\r\n    * @return {string[]} - an array of notes (written in scientific pitch)\r\n    */\r\n  getAllChordTones(chord, lowerLimit, upperLimit) {\r\n    var chordTones = tonal.chord(chord);\r\n    var chordTonesInRange = tonal.range.pitchSet(chordTones, [lowerLimit, upperLimit]);\r\n\r\n    for(var i = 0; i < chordTonesInRange.length; i++) {\r\n      for(var j = 0; j < chordTones.length; j++) {\r\n        // Fixing pesky issue where D7 was returned as \"D Gb A C\" instead of \"D F# A C\"\r\n        // If the current chord tone is enharmonic with the note from the pitch set,\r\n        // Override it with the chord tone.\r\n        if(tonal.note.pc(chordTonesInRange[i]) != chordTones[j]\r\n          && tonal.note.enharmonics(chordTones[j]).indexOf(tonal.note.pc(chordTonesInRange[i])) > -1) {\r\n          chordTonesInRange[i] = chordTones[j] + tonal.note.oct(chordTonesInRange[i]);\r\n        }\r\n      }\r\n    }\r\n\r\n    return chordTonesInRange;\r\n  }\r\n\r\n    /**\r\n    * For a given chord symbol, creates a ChordUnit object\r\n    * @private\r\n    * @param {string} chord - chord symbol\r\n    * @param {string} lowerLimit - note (in scientific notation)\r\n    * @param {string} upperLimit - note (in scientific notation)\r\n    * @return {ChordUnit}\r\n    */\r\n  buildChordUnit(chord, lowerLimit, upperLimit) {\r\n    var chordTonesInRange = this.getAllChordTones(chord, lowerLimit, upperLimit);\r\n    var chordUnit = new ChordUnit.ChordUnit(chord, chordTonesInRange, null);\r\n    return chordUnit;\r\n  }\r\n\r\n    /**\r\n    * For a given melody, creates a MelodyUnit object\r\n    * @private\r\n    * @param {string[]} chordProgression - a chord progression\r\n    * @param {string} melodyString - a melody (in scientific notation)\r\n    * @return {MelodyUnit}\r\n    */\r\n  buildMelodyUnit(chordProgression, melodyString) {\r\n    var arrMelody = melodyString.split(\" \");\r\n    var melodyUnit = new MelodyUnit.MelodyUnit(chordProgression, arrMelody);\r\n    return melodyUnit;\r\n  }\r\n\r\n    /**\r\n    * For a given chord progression and melody, generate a series of melodies that fit over the progression\r\n    * @private\r\n    * @param {string[]} chordProgression - a chord progression\r\n    * @param {string[]} rawMelodies - a string representing the melody\r\n    * @param {Object} options - if true, generated melodies will be sorted, with smoothest melodies coming first.\r\n    * @param {boolean} options.sort - if true, generated melodies will be sorted, with smoothest melodies coming first.\r\n    * @param {number} options.limit - limits the output to a set number.\r\n    * @return {MelodyUnit[]} - a list of ChordUnit objects.\r\n    */\r\n  buildMelodyUnitList(chordProgression, rawMelodies, options) {\r\n    var melodyUnits = [];\r\n    var haxThis = this;\r\n\r\n    rawMelodies.forEach(function(rawMelody) {\r\n      melodyUnits.push(haxThis.buildMelodyUnit(chordProgression, rawMelody));\r\n    });\r\n\r\n    if(options) {\r\n      if(options.sort) {\r\n        melodyUnits.sort(function(a, b) {\r\n          return a.smoothness - b.smoothness;\r\n        });\r\n      }\r\n\r\n      if(options.limit) {\r\n        melodyUnits.splice(options.limit);\r\n      }\r\n    }\r\n    return melodyUnits;\r\n  }\r\n\r\n    /**\r\n    * For a given chord progression, generate a series of melodies that fit over the progression\r\n    * @private\r\n    * @param {string[]} chordProgression - chord symbols\r\n    * @param {string} lowerLimit - lower limit (in scientific notation). Optional value.\r\n    * @param {string} upperLimit - upper limit (in scientific notation). Optional value.\r\n    * @return {ChordUnit[]} - a list of ChordUnit objects.\r\n    */\r\n  buildChordUnitList(chordProgression, lowerLimit, upperLimit) {\r\n    if(lowerLimit == null) {\r\n      lowerLimit = this.lowerLimit;\r\n    }\r\n    if(upperLimit == null) {\r\n      upperLimit = this.upperLimit;\r\n    }\r\n\r\n    var chordUnitList = [];\r\n    var chordTonesInRange;\r\n\r\n    for(var i = chordProgression.length - 1; i >= 0; i--) {\r\n      chordTonesInRange = this.getAllChordTones(chordProgression[i], lowerLimit, upperLimit);\r\n\r\n      if(i === chordProgression.length) {\r\n        chordUnitList[i] = new ChordUnit.ChordUnit(chordProgression[i], chordTonesInRange, null);\r\n      } else {\r\n        chordUnitList[i] = new ChordUnit.ChordUnit(chordProgression[i], chordTonesInRange, chordUnitList[i + 1]);\r\n      }\r\n    }\r\n\r\n    return chordUnitList;\r\n  }\r\n\r\n    /**\r\n    * Recursive function that adds new notes to the previous notes passed into it.\r\n    * On the first call of this function, melodyList should be null.\r\n    * @private\r\n    * @param {ChordUnit} chordUnit - the ChordUnit for the next chord\r\n    * @param {?string[]} melodyList - list of existing melodies\r\n    * @param {Object} options - if true, generated melodies will be filtered\r\n    * @param {boolean} options.filtered - if true, generated melodies will be filtered\r\n    * @param {boolean} options.rawOutput - if true, generated melodies will be given as strings\r\n    * @return {string[]} - a list of melodies. Each element is a string represeting a melody. Each melody string is written as a series of pitches delimited by a space.\r\n    */\r\n  getMelodiesCore(chordUnit, melodyList, options) {\r\n    var returnList = [];\r\n    var chordTones = chordUnit.chordTones;\r\n    var currentMelody, currentChordTone;\r\n    var rawMelody, newMelody, isInRange;\r\n    var isNotRepetitive, timestamp, haxThis = this;\r\n\r\n    if(melodyList) {\r\n      // We're somewhere along the middle of the chain.\r\n      for(var i = 0; i < melodyList.length; i++) {\r\n        currentMelody = melodyList[i];\r\n\r\n        for(var j = 0; j < chordTones.length; j++) {\r\n          currentChordTone = chordTones[j];\r\n\r\n          if(melodyList.length > 10000) {\r\n            timestamp = new Date().valueOf().toString().slice(-8);\r\n            if(timestamp % 8 === 0) {\r\n              // Randomly skips generation every now and then.\r\n              // Removes 20% of results?\r\n              break;\r\n            }\r\n          }\r\n\r\n          newMelody = currentMelody + \" \" + currentChordTone;\r\n\r\n          if(options.filtered) {\r\n            // check the distance of the last note and the new chord tone\r\n            // if it's more than an octave, skip this.\r\n            isInRange = AcLogic.filterMelodyRange(newMelody);\r\n            if(!isInRange) {\r\n              break;\r\n            }\r\n\r\n            if(newMelody.split(\" \").length >= 3) {\r\n              // check if melody is too repetitive. For our purposes, three of the same notes in a row\r\n              // would be too repetitive.\r\n              isNotRepetitive =  AcLogic.filterRepetition(newMelody);\r\n            } else {\r\n              isNotRepetitive = true;\r\n            }\r\n            if(!isNotRepetitive) {\r\n              break;\r\n            }\r\n\r\n            returnList.push(newMelody);\r\n          } else {\r\n            returnList.push(newMelody);\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      // This is the beginning of the chain.\r\n      melodyList = chordUnit.chordTones;\r\n      returnList.push.apply(returnList, melodyList);\r\n    }\r\n\r\n    if(chordUnit.nextChordUnit) {\r\n      // We're somewhere before the end of the chain.\r\n      return this.getMelodiesCore(chordUnit.nextChordUnit, returnList, options);\r\n    } else {\r\n      // End of the chain.\r\n      if(options.filtered && returnList.length > AcLogic.NUM_MELODIES_LIMIT) {\r\n        this._sendStatusUpdate(\"Generated  \" + returnList.length + \" melodies. Creating list of \" + AcLogic.NUM_MELODIES_LIMIT + \"...\");\r\n      } else {\r\n        this._sendStatusUpdate(\"Generated  \" + returnList.length + \" melodies.\");\r\n      }\r\n      return returnList;\r\n    }\r\n  }\r\n\r\n    /**\r\n    * For a given chord progression, generate a series of melodies that fit over the progression.\r\n    * @param {string[]} chordProgression - chord progression given by user\r\n    * @return {MelodyUnit[]} - an array of notes (written in scientific pitch)\r\n    */\r\n  getAllMelodies(chordProgression) {\r\n    var chordUnitList = this.buildChordUnitList(chordProgression, this.lowerLimit, this.upperLimit);\r\n    var melodies = this.getMelodiesCore(chordUnitList[0], null, {filtered: false});\r\n\r\n    var melodyUnits = [];\r\n    var haxThis = this;\r\n    melodies.forEach(function(rawMelody) {\r\n      melodyUnits.push(haxThis.buildMelodyUnit(chordProgression, rawMelody));\r\n    });\r\n\r\n    return melodyUnits;\r\n  }\r\n\r\n    /**\r\n    * For a given chord progression, generate a series of melodies that fit over the progression.\r\n    * @param {string[]} chordProgression - chord progression given by user\r\n    * @return {string[]} - an array of notes (written in scientific pitch)\r\n    */\r\n  getRawMelodies(chordProgression) {\r\n    var chordUnitList = this.buildChordUnitList(chordProgression, this.lowerLimit, this.upperLimit);\r\n    var melodies = this.getMelodiesCore(chordUnitList[0], null, {filtered: true, rawOutput: true});\r\n\r\n    return melodies;\r\n  }\r\n\r\n    /**\r\n    * For a given chord progression, generate a series of melodies that fit over the progression.\r\n    * Currently, the melodies are sorted by smoothness, and are limited to the first 100 melodies.\r\n    * @param {string[]} chordProgression - chord progression given by user\r\n    * @return {MelodyUnit[]} - an array of MelodyUnits\r\n    */\r\n  getMelodies(chordProgression) {\r\n    var chordUnitList = this.buildChordUnitList(chordProgression, this.lowerLimit, this.upperLimit);\r\n    var rawMelodies = this.getMelodiesCore(chordUnitList[0], null, {filtered: true});\r\n    var options = {sort: true, limit: AcLogic.NUM_MELODIES_LIMIT};\r\n\r\n    var melodyUnits = this.buildMelodyUnitList(chordProgression, rawMelodies, options);\r\n\r\n    return melodyUnits;\r\n  }\r\n\r\n};\r\n\r\nexports.AutoComposerMelody = AutoComposerMelody;\r\n",
    "static": true,
    "longname": "src/autocomposer-melody.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 75,
    "kind": "variable",
    "name": "tonal",
    "memberof": "src/autocomposer-melody.js",
    "static": true,
    "longname": "src/autocomposer-melody.js~tonal",
    "access": null,
    "export": false,
    "importPath": "autocomposer-melody/src/autocomposer-melody.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 76,
    "kind": "variable",
    "name": "ChordUnit",
    "memberof": "src/autocomposer-melody.js",
    "static": true,
    "longname": "src/autocomposer-melody.js~ChordUnit",
    "access": null,
    "export": false,
    "importPath": "autocomposer-melody/src/autocomposer-melody.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 77,
    "kind": "variable",
    "name": "MelodyUnit",
    "memberof": "src/autocomposer-melody.js",
    "static": true,
    "longname": "src/autocomposer-melody.js~MelodyUnit",
    "access": null,
    "export": false,
    "importPath": "autocomposer-melody/src/autocomposer-melody.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 78,
    "kind": "variable",
    "name": "AutoComposerLogic",
    "memberof": "src/autocomposer-melody.js",
    "static": true,
    "longname": "src/autocomposer-melody.js~AutoComposerLogic",
    "access": null,
    "export": false,
    "importPath": "autocomposer-melody/src/autocomposer-melody.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 79,
    "kind": "variable",
    "name": "AcLogic",
    "memberof": "src/autocomposer-melody.js",
    "static": true,
    "longname": "src/autocomposer-melody.js~AcLogic",
    "access": null,
    "export": false,
    "importPath": "autocomposer-melody/src/autocomposer-melody.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 80,
    "kind": "class",
    "name": "AutoComposerMelody",
    "memberof": "src/autocomposer-melody.js",
    "static": true,
    "longname": "src/autocomposer-melody.js~AutoComposerMelody",
    "access": null,
    "export": true,
    "importPath": "autocomposer-melody/src/autocomposer-melody.js",
    "importStyle": "{AutoComposerMelody}",
    "description": "Creates melodies from a given chord progression",
    "lineNumber": 11,
    "interface": false
  },
  {
    "__docId__": 81,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/autocomposer-melody.js~AutoComposerMelody",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/autocomposer-melody.js~AutoComposerMelody#constructor",
    "access": null,
    "description": "",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "chordProgression",
        "description": "array of chord symbols"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "lowerLimit",
        "description": "lower boundary note (in scientific notation)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "upperLimit",
        "description": "upper boundary note (in scientific notation)"
      }
    ]
  },
  {
    "__docId__": 82,
    "kind": "member",
    "name": "chordProgression",
    "memberof": "src/autocomposer-melody.js~AutoComposerMelody",
    "static": false,
    "longname": "src/autocomposer-melody.js~AutoComposerMelody#chordProgression",
    "access": null,
    "description": null,
    "lineNumber": 19,
    "type": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 83,
    "kind": "member",
    "name": "lowerLimit",
    "memberof": "src/autocomposer-melody.js~AutoComposerMelody",
    "static": false,
    "longname": "src/autocomposer-melody.js~AutoComposerMelody#lowerLimit",
    "access": null,
    "description": null,
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 84,
    "kind": "member",
    "name": "upperLimit",
    "memberof": "src/autocomposer-melody.js~AutoComposerMelody",
    "static": false,
    "longname": "src/autocomposer-melody.js~AutoComposerMelody#upperLimit",
    "access": null,
    "description": null,
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 85,
    "kind": "method",
    "name": "_sendStatusUpdate",
    "memberof": "src/autocomposer-melody.js~AutoComposerMelody",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/autocomposer-melody.js~AutoComposerMelody#_sendStatusUpdate",
    "access": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 86,
    "kind": "method",
    "name": "_getLowestNoteInRange",
    "memberof": "src/autocomposer-melody.js~AutoComposerMelody",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/autocomposer-melody.js~AutoComposerMelody#_getLowestNoteInRange",
    "access": "private",
    "description": "For a given note, find its lowest instance in the specified range.",
    "lineNumber": 39,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "pitch",
        "description": "pitch class"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "lowerLimit",
        "description": "note (written in scientific notation)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "upperLimit",
        "description": "note (written in scientific notation)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": "an array of notes (written in scientific pitch)"
    }
  },
  {
    "__docId__": 87,
    "kind": "method",
    "name": "_removePitchesFromChordTones",
    "memberof": "src/autocomposer-melody.js~AutoComposerMelody",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/autocomposer-melody.js~AutoComposerMelody#_removePitchesFromChordTones",
    "access": "private",
    "description": "For a given array of chord tones, remove the specified pitches.",
    "lineNumber": 51,
    "params": [
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "pitchArray",
        "description": "pitches to remove"
      },
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "chordTones",
        "description": "chord tones"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": "the remaining chord tones"
    }
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "getAccompaniment",
    "memberof": "src/autocomposer-melody.js~AutoComposerMelody",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/autocomposer-melody.js~AutoComposerMelody#getAccompaniment",
    "access": "private",
    "description": "For a given MelodyUnit, get an accompaniment for it.",
    "lineNumber": 68,
    "params": [
      {
        "nullable": null,
        "types": [
          "MelodyUnit"
        ],
        "spread": false,
        "optional": false,
        "name": "melodyUnit",
        "description": "melody that needs accompaniment"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": "array of strings, each representing one or more notes to play under each melodic note."
    }
  },
  {
    "__docId__": 89,
    "kind": "method",
    "name": "getBasicBassLine",
    "memberof": "src/autocomposer-melody.js~AutoComposerMelody",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/autocomposer-melody.js~AutoComposerMelody#getBasicBassLine",
    "access": "private",
    "description": "For a given MelodyUnit, return a basic bass line consisting only of root notes.",
    "lineNumber": 95,
    "params": [
      {
        "nullable": null,
        "types": [
          "MelodyUnit"
        ],
        "spread": false,
        "optional": false,
        "name": "melodyUnit",
        "description": "melody that needs a bassline"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "string representing a bassline."
    }
  },
  {
    "__docId__": 90,
    "kind": "method",
    "name": "getAllChordTones",
    "memberof": "src/autocomposer-melody.js~AutoComposerMelody",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/autocomposer-melody.js~AutoComposerMelody#getAllChordTones",
    "access": "private",
    "description": "For a given chord, get all the chord tones between the upper and lower limits.",
    "lineNumber": 118,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "chord",
        "description": "chord symbol"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "lowerLimit",
        "description": "note (written in scientific notation)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "upperLimit",
        "description": "note (written in scientific notation)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": "an array of notes (written in scientific pitch)"
    }
  },
  {
    "__docId__": 91,
    "kind": "method",
    "name": "buildChordUnit",
    "memberof": "src/autocomposer-melody.js~AutoComposerMelody",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/autocomposer-melody.js~AutoComposerMelody#buildChordUnit",
    "access": "private",
    "description": "For a given chord symbol, creates a ChordUnit object",
    "lineNumber": 145,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "chord",
        "description": "chord symbol"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "lowerLimit",
        "description": "note (in scientific notation)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "upperLimit",
        "description": "note (in scientific notation)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ChordUnit"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 92,
    "kind": "method",
    "name": "buildMelodyUnit",
    "memberof": "src/autocomposer-melody.js~AutoComposerMelody",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/autocomposer-melody.js~AutoComposerMelody#buildMelodyUnit",
    "access": "private",
    "description": "For a given melody, creates a MelodyUnit object",
    "lineNumber": 158,
    "params": [
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "chordProgression",
        "description": "a chord progression"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "melodyString",
        "description": "a melody (in scientific notation)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "MelodyUnit"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "buildMelodyUnitList",
    "memberof": "src/autocomposer-melody.js~AutoComposerMelody",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/autocomposer-melody.js~AutoComposerMelody#buildMelodyUnitList",
    "access": "private",
    "description": "For a given chord progression and melody, generate a series of melodies that fit over the progression",
    "lineNumber": 174,
    "params": [
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "chordProgression",
        "description": "a chord progression"
      },
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "rawMelodies",
        "description": "a string representing the melody"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "if true, generated melodies will be sorted, with smoothest melodies coming first."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "options.sort",
        "description": "if true, generated melodies will be sorted, with smoothest melodies coming first."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "options.limit",
        "description": "limits the output to a set number."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "MelodyUnit[]"
      ],
      "spread": false,
      "description": "a list of ChordUnit objects."
    }
  },
  {
    "__docId__": 94,
    "kind": "method",
    "name": "buildChordUnitList",
    "memberof": "src/autocomposer-melody.js~AutoComposerMelody",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/autocomposer-melody.js~AutoComposerMelody#buildChordUnitList",
    "access": "private",
    "description": "For a given chord progression, generate a series of melodies that fit over the progression",
    "lineNumber": 204,
    "params": [
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "chordProgression",
        "description": "chord symbols"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "lowerLimit",
        "description": "lower limit (in scientific notation). Optional value."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "upperLimit",
        "description": "upper limit (in scientific notation). Optional value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ChordUnit[]"
      ],
      "spread": false,
      "description": "a list of ChordUnit objects."
    }
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "getMelodiesCore",
    "memberof": "src/autocomposer-melody.js~AutoComposerMelody",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/autocomposer-melody.js~AutoComposerMelody#getMelodiesCore",
    "access": "private",
    "description": "Recursive function that adds new notes to the previous notes passed into it.\nOn the first call of this function, melodyList should be null.",
    "lineNumber": 239,
    "params": [
      {
        "nullable": null,
        "types": [
          "ChordUnit"
        ],
        "spread": false,
        "optional": false,
        "name": "chordUnit",
        "description": "the ChordUnit for the next chord"
      },
      {
        "nullable": true,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "melodyList",
        "description": "list of existing melodies"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "if true, generated melodies will be filtered"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "options.filtered",
        "description": "if true, generated melodies will be filtered"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "options.rawOutput",
        "description": "if true, generated melodies will be given as strings"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": "a list of melodies. Each element is a string represeting a melody. Each melody string is written as a series of pitches delimited by a space."
    }
  },
  {
    "__docId__": 96,
    "kind": "method",
    "name": "getAllMelodies",
    "memberof": "src/autocomposer-melody.js~AutoComposerMelody",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/autocomposer-melody.js~AutoComposerMelody#getAllMelodies",
    "access": null,
    "description": "For a given chord progression, generate a series of melodies that fit over the progression.",
    "lineNumber": 315,
    "params": [
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "chordProgression",
        "description": "chord progression given by user"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "MelodyUnit[]"
      ],
      "spread": false,
      "description": "an array of notes (written in scientific pitch)"
    }
  },
  {
    "__docId__": 97,
    "kind": "method",
    "name": "getRawMelodies",
    "memberof": "src/autocomposer-melody.js~AutoComposerMelody",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/autocomposer-melody.js~AutoComposerMelody#getRawMelodies",
    "access": null,
    "description": "For a given chord progression, generate a series of melodies that fit over the progression.",
    "lineNumber": 333,
    "params": [
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "chordProgression",
        "description": "chord progression given by user"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": "an array of notes (written in scientific pitch)"
    }
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "getMelodies",
    "memberof": "src/autocomposer-melody.js~AutoComposerMelody",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/autocomposer-melody.js~AutoComposerMelody#getMelodies",
    "access": null,
    "description": "For a given chord progression, generate a series of melodies that fit over the progression.\nCurrently, the melodies are sorted by smoothness, and are limited to the first 100 melodies.",
    "lineNumber": 346,
    "params": [
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "chordProgression",
        "description": "chord progression given by user"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "MelodyUnit[]"
      ],
      "spread": false,
      "description": "an array of MelodyUnits"
    }
  },
  {
    "__docId__": 99,
    "kind": "file",
    "name": "src/autocomposer-midi.js",
    "content": "var MidiWriter = require('midi-writer-js');\r\nvar MidiPlayer = require('midi-player-js');\r\nvar SoundfontPlayer = require('soundfont-player');\r\nvar tonalNote = require('tonal-note');\r\n\r\n/**\r\n * Class responsible for playing audio and generating MIDI files for users.\r\n */\r\nclass AutoComposerMidi {\r\n  constructor() {\r\n    this.INSTRUMENT_NAMES = [\"violin\", \"acoustic_grand_piano\", \"acoustic_bass\"];\r\n    this.INSTRUMENT_GAIN = {\r\n      violin: 1.7,\r\n      acoustic_grand_piano: 1.6,\r\n      acoustic_bass: 1.65\r\n    }\r\n    this.NOTE_DURATION = \"1\";\r\n\r\n    this.instruments = {};\r\n    this.instrumentInit = 0;\r\n\r\n    this.player = null;\r\n    this.audioContext = new AudioContext;\r\n\r\n    this.initialized = false;\r\n    // Added this flag to fix an issue where notes randomly play again after the track ends.\r\n    // It only works for tracks that are all the same length. If we ever have to play tracks that have\r\n    // different lengths, we'll need a different solution.\r\n    this.playbackLocked = true;\r\n\r\n    // is this kind of scope hackery necessary?!\r\n    var haxThis = this;\r\n\r\n    for(var i = 0; i < this.INSTRUMENT_NAMES.length; i++) {\r\n      // initialize each instrument\r\n      Soundfont.instrument(this.audioContext, this.INSTRUMENT_NAMES[i], {soundfont: 'FluidR3_GM'}).then(function (sfInstrument) {\r\n        haxThis.instruments[sfInstrument.name] = sfInstrument;\r\n        haxThis.instrumentInit++;\r\n\r\n        if(haxThis.instrumentInit === haxThis.INSTRUMENT_NAMES.length) {\r\n          haxThis._finishLoad();\r\n        }\r\n      });\r\n    }\r\n\r\n  }\r\n\r\n    /**\r\n    * Triggers the note playing for all instruments. Called for every MIDI event in the app.\r\n    * @private\r\n    * @param {number} event - MIDI event\r\n    */\r\n  _midiCallback(event) {\r\n    // callback for MIDI events\r\n    var instr1 = this.instruments[\"violin\"];\r\n    var instr2 = this.instruments[\"acoustic_grand_piano\"];\r\n    var instr3 = this.instruments[\"acoustic_bass\"];\r\n\r\n    if (!this.playbackLocked && event.name == 'Note on' && event.velocity > 0) {\r\n        switch(event.track) {\r\n          case 1:\r\n            instr1.play(event.noteName, this.audioContext.currentTime, {gain: this.INSTRUMENT_GAIN[\"violin\"]});\r\n            break;\r\n          case 2:\r\n            instr2.play(event.noteName, this.audioContext.currentTime, {gain: this.INSTRUMENT_GAIN[\"acoustic_grand_piano\"]});\r\n            break;\r\n          case 3:\r\n            instr3.play(event.noteName, this.audioContext.currentTime, {gain: this.INSTRUMENT_GAIN[\"acoustic_bass\"]});\r\n            break;\r\n          default:\r\n            // nothing!\r\n        }\r\n    }\r\n\r\n    if (event.name == 'Note off') {\r\n      switch(event.track) {\r\n        case 1:\r\n          instr1.stop();\r\n          break;\r\n        case 2:\r\n          instr2.stop();\r\n          break;\r\n        case 3:\r\n          instr3.stop();\r\n          break;\r\n        default:\r\n          // nothing!\r\n      }\r\n    }\r\n\r\n    if (event.name == \"End of Track\") {\r\n      this.playbackLocked = true;\r\n    }\r\n  }\r\n\r\n    /**\r\n    * Completes the loading of this class. The \"midiPlayerReady\" eve\r\n    * @private\r\n    * @emits {midiPlayerReady} - Emits this event when the audio player successfully loads\r\n    */\r\n  _finishLoad() {\r\n    var haxThis = this;\r\n    this.player = new MidiPlayer.Player(function(event) {\r\n      haxThis._midiCallback(event);\r\n    });\r\n    this.initialized = true;\r\n    this.playbackLocked = false;\r\n\r\n    var updateEvent = new CustomEvent('statusUpdate', {detail: \"MIDI player is loaded!\"});\r\n    document.body.dispatchEvent(updateEvent);\r\n  }\r\n\r\n    /**\r\n    * Builds MIDI info for a note or chord\r\n    * @private\r\n    * @param {number[]} arrNumMidi - MIDI numbers for a set of pitches\r\n    * @param {number} duration - MIDI number for a pitch\r\n    * @param {number} wait\r\n    * @return {MidiWriter.NoteEvent} - ???\r\n    */\r\n  _buildMidi(arrNumMidi, duration, wait) {\r\n      if(!wait) {\r\n          wait = \"0\";\r\n      }\r\n      return new MidiWriter.NoteEvent({pitch: arrNumMidi, duration: duration, wait: wait, velocity: 100});\r\n  }\r\n\r\n    /**\r\n    * Builds a Track from a given chord.\r\n    * @private\r\n    * @param {string[]} arrChordNotes - chordNotes\r\n    * @return {Track} - a MidiWriter Track\r\n    */\r\n  _buildTrack(arrChordNotes) {\r\n    var notes, midiNumber, midiNumbers;\r\n    var returnTrack = new MidiWriter.Track();\r\n\r\n    for(var i = 0; i < arrChordNotes.length; i++) {\r\n      midiNumbers = [];\r\n      notes = arrChordNotes[i].split(\" \");\r\n\r\n      notes.forEach(function(note){\r\n        midiNumbers.push(tonalNote.midi(note));\r\n      })\r\n\r\n      returnTrack.addEvent(this._buildMidi(midiNumbers, this.NOTE_DURATION));\r\n    }\r\n\r\n    return returnTrack;\r\n  }\r\n\r\n    /**\r\n    * Gets the MIDI data for a given melody.\r\n    * @private\r\n    * @param {string[]} arrMelody - our melody\r\n    * @return {string} - MIDI data, as a DataURI string\r\n    */\r\n  _buildMelodyMidiSolo(arrMelody) {\r\n    var tracks = [], midiNumber;\r\n    //tracks[0] = this._buildMelodyTrack(arrMelody);\r\n    tracks[0] = this._buildTrack(arrMelody);\r\n\r\n    var write = new MidiWriter.Writer(tracks);\r\n\r\n    return write.dataUri();\r\n  }\r\n\r\n    /**\r\n    * Gets the MIDI data for a given melody, with accompaniment.\r\n    * @param {string[]} arrMelody - main melody\r\n    * @param {string[]} arrAcompanimentLine - accompaniment line\r\n    * @param {string[]} arrBassLine - bass line\r\n    * @return {string} - MIDI data, as a DataURI string.\r\n    */\r\n  buildMelodyMidiWithAccompaniment(arrMelody, arrAcompanimentLine, arrBassLine) {\r\n    var tracks, midiNumber;\r\n\r\n    //var melodyTrack = this._buildMelodyTrack(arrMelody);\r\n    var melodyTrack = this._buildTrack(arrMelody);\r\n    melodyTrack.addInstrumentName(\"violin\");\r\n\r\n    var accompanimentTrack = this._buildTrack(arrAcompanimentLine);\r\n    accompanimentTrack.addInstrumentName(\"acoustic_grand_piano\");\r\n\r\n    //var bassTrack = this._buildMelodyTrack(arrBassLine);\r\n    var bassTrack = this._buildTrack(arrBassLine);\r\n    bassTrack.addInstrumentName(\"acoustic_bass\");\r\n\r\n    tracks = [melodyTrack, accompanimentTrack, bassTrack];\r\n\r\n    var write = new MidiWriter.Writer(tracks);\r\n\r\n    return write.dataUri();\r\n  }\r\n\r\n    /**\r\n    * Plays the given melody.\r\n    * @param {string[]} melodySolo - solo melody (violin)\r\n    */\r\n  playMelodySolo(melodySolo) {\r\n    var strMidi = this._buildMelodyMidiSolo(melodySolo);\r\n    this._playMelody(strMidi);\r\n  }\r\n    /**\r\n    * Plays the given melodies.\r\n    * @param {string[]} melodySolo - solo melody (violin)\r\n    * @param {string[]} melodyAccomp - accompaniment melody (piano)\r\n    * @param {string[]} melodyBass - bass melody (bass)\r\n    */\r\n  playMelodyWithAccompaniment(melodySolo, melodyAccomp, melodyBass) {\r\n    var strMidi = this.buildMelodyMidiWithAccompaniment(melodySolo, melodyAccomp, melodyBass);\r\n    this._playMelody(strMidi);\r\n  }\r\n\r\n    /**\r\n    * Actually plays the given melody\r\n    * @private\r\n    * @param {string} strMidi - MIDI data, as a DataURI string.\r\n    */\r\n  _playMelody(strMidi) {\r\n    if(this.initialized) {\r\n      this.stopPlayback();\r\n      this.playbackLocked = false;\r\n      this.player.loadDataUri(strMidi);\r\n      this.player.play();\r\n    } else {\r\n      console.warn(\"[AutoComposerMidi._playMelody()] Player isn't initialized yet...\");\r\n    }\r\n  }\r\n\r\n    /**\r\n    * Stops all playback\r\n    */\r\n  stopPlayback() {\r\n    this.instruments[\"violin\"].stop();\r\n    this.instruments[\"acoustic_grand_piano\"].stop();\r\n    this.instruments[\"acoustic_bass\"].stop();\r\n    this.player.stop();\r\n  }\r\n}\r\n\r\nexports.AutoComposerMidi = AutoComposerMidi;\r\n",
    "static": true,
    "longname": "src/autocomposer-midi.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 100,
    "kind": "variable",
    "name": "MidiWriter",
    "memberof": "src/autocomposer-midi.js",
    "static": true,
    "longname": "src/autocomposer-midi.js~MidiWriter",
    "access": null,
    "export": false,
    "importPath": "autocomposer-melody/src/autocomposer-midi.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 101,
    "kind": "variable",
    "name": "MidiPlayer",
    "memberof": "src/autocomposer-midi.js",
    "static": true,
    "longname": "src/autocomposer-midi.js~MidiPlayer",
    "access": null,
    "export": false,
    "importPath": "autocomposer-melody/src/autocomposer-midi.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 102,
    "kind": "variable",
    "name": "SoundfontPlayer",
    "memberof": "src/autocomposer-midi.js",
    "static": true,
    "longname": "src/autocomposer-midi.js~SoundfontPlayer",
    "access": null,
    "export": false,
    "importPath": "autocomposer-melody/src/autocomposer-midi.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 103,
    "kind": "variable",
    "name": "tonalNote",
    "memberof": "src/autocomposer-midi.js",
    "static": true,
    "longname": "src/autocomposer-midi.js~tonalNote",
    "access": null,
    "export": false,
    "importPath": "autocomposer-melody/src/autocomposer-midi.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 104,
    "kind": "class",
    "name": "AutoComposerMidi",
    "memberof": "src/autocomposer-midi.js",
    "static": true,
    "longname": "src/autocomposer-midi.js~AutoComposerMidi",
    "access": null,
    "export": true,
    "importPath": "autocomposer-melody/src/autocomposer-midi.js",
    "importStyle": "{AutoComposerMidi}",
    "description": "Class responsible for playing audio and generating MIDI files for users.",
    "lineNumber": 9,
    "interface": false
  },
  {
    "__docId__": 105,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/autocomposer-midi.js~AutoComposerMidi",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/autocomposer-midi.js~AutoComposerMidi#constructor",
    "access": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 106,
    "kind": "member",
    "name": "INSTRUMENT_NAMES",
    "memberof": "src/autocomposer-midi.js~AutoComposerMidi",
    "static": false,
    "longname": "src/autocomposer-midi.js~AutoComposerMidi#INSTRUMENT_NAMES",
    "access": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "string[]"
      ]
    }
  },
  {
    "__docId__": 107,
    "kind": "member",
    "name": "INSTRUMENT_GAIN",
    "memberof": "src/autocomposer-midi.js~AutoComposerMidi",
    "static": false,
    "longname": "src/autocomposer-midi.js~AutoComposerMidi#INSTRUMENT_GAIN",
    "access": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "{\"violin\": number, \"acoustic_grand_piano\": number, \"acoustic_bass\": number}"
      ]
    }
  },
  {
    "__docId__": 108,
    "kind": "member",
    "name": "NOTE_DURATION",
    "memberof": "src/autocomposer-midi.js~AutoComposerMidi",
    "static": false,
    "longname": "src/autocomposer-midi.js~AutoComposerMidi#NOTE_DURATION",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 109,
    "kind": "member",
    "name": "instruments",
    "memberof": "src/autocomposer-midi.js~AutoComposerMidi",
    "static": false,
    "longname": "src/autocomposer-midi.js~AutoComposerMidi#instruments",
    "access": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 110,
    "kind": "member",
    "name": "instrumentInit",
    "memberof": "src/autocomposer-midi.js~AutoComposerMidi",
    "static": false,
    "longname": "src/autocomposer-midi.js~AutoComposerMidi#instrumentInit",
    "access": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 111,
    "kind": "member",
    "name": "player",
    "memberof": "src/autocomposer-midi.js~AutoComposerMidi",
    "static": false,
    "longname": "src/autocomposer-midi.js~AutoComposerMidi#player",
    "access": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 112,
    "kind": "member",
    "name": "audioContext",
    "memberof": "src/autocomposer-midi.js~AutoComposerMidi",
    "static": false,
    "longname": "src/autocomposer-midi.js~AutoComposerMidi#audioContext",
    "access": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 113,
    "kind": "member",
    "name": "initialized",
    "memberof": "src/autocomposer-midi.js~AutoComposerMidi",
    "static": false,
    "longname": "src/autocomposer-midi.js~AutoComposerMidi#initialized",
    "access": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 114,
    "kind": "member",
    "name": "playbackLocked",
    "memberof": "src/autocomposer-midi.js~AutoComposerMidi",
    "static": false,
    "longname": "src/autocomposer-midi.js~AutoComposerMidi#playbackLocked",
    "access": null,
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 115,
    "kind": "method",
    "name": "_midiCallback",
    "memberof": "src/autocomposer-midi.js~AutoComposerMidi",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/autocomposer-midi.js~AutoComposerMidi#_midiCallback",
    "access": "private",
    "description": "Triggers the note playing for all instruments. Called for every MIDI event in the app.",
    "lineNumber": 53,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "MIDI event"
      }
    ]
  },
  {
    "__docId__": 116,
    "kind": "member",
    "name": "playbackLocked",
    "memberof": "src/autocomposer-midi.js~AutoComposerMidi",
    "static": false,
    "longname": "src/autocomposer-midi.js~AutoComposerMidi#playbackLocked",
    "access": null,
    "description": null,
    "lineNumber": 92,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 117,
    "kind": "method",
    "name": "_finishLoad",
    "memberof": "src/autocomposer-midi.js~AutoComposerMidi",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/autocomposer-midi.js~AutoComposerMidi#_finishLoad",
    "access": "private",
    "description": "Completes the loading of this class. The \"midiPlayerReady\" eve",
    "lineNumber": 101,
    "params": [],
    "emits": [
      {
        "types": [
          "midiPlayerReady"
        ],
        "description": "Emits this event when the audio player successfully loads"
      }
    ]
  },
  {
    "__docId__": 118,
    "kind": "member",
    "name": "player",
    "memberof": "src/autocomposer-midi.js~AutoComposerMidi",
    "static": false,
    "longname": "src/autocomposer-midi.js~AutoComposerMidi#player",
    "access": null,
    "description": null,
    "lineNumber": 103,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 119,
    "kind": "member",
    "name": "initialized",
    "memberof": "src/autocomposer-midi.js~AutoComposerMidi",
    "static": false,
    "longname": "src/autocomposer-midi.js~AutoComposerMidi#initialized",
    "access": null,
    "description": null,
    "lineNumber": 106,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 120,
    "kind": "member",
    "name": "playbackLocked",
    "memberof": "src/autocomposer-midi.js~AutoComposerMidi",
    "static": false,
    "longname": "src/autocomposer-midi.js~AutoComposerMidi#playbackLocked",
    "access": null,
    "description": null,
    "lineNumber": 107,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 121,
    "kind": "method",
    "name": "_buildMidi",
    "memberof": "src/autocomposer-midi.js~AutoComposerMidi",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/autocomposer-midi.js~AutoComposerMidi#_buildMidi",
    "access": "private",
    "description": "Builds MIDI info for a note or chord",
    "lineNumber": 121,
    "params": [
      {
        "nullable": null,
        "types": [
          "number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "arrNumMidi",
        "description": "MIDI numbers for a set of pitches"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "duration",
        "description": "MIDI number for a pitch"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "wait",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "MidiWriter.NoteEvent"
      ],
      "spread": false,
      "description": "???"
    }
  },
  {
    "__docId__": 122,
    "kind": "method",
    "name": "_buildTrack",
    "memberof": "src/autocomposer-midi.js~AutoComposerMidi",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/autocomposer-midi.js~AutoComposerMidi#_buildTrack",
    "access": "private",
    "description": "Builds a Track from a given chord.",
    "lineNumber": 134,
    "params": [
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "arrChordNotes",
        "description": "chordNotes"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Track"
      ],
      "spread": false,
      "description": "a MidiWriter Track"
    }
  },
  {
    "__docId__": 123,
    "kind": "method",
    "name": "_buildMelodyMidiSolo",
    "memberof": "src/autocomposer-midi.js~AutoComposerMidi",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/autocomposer-midi.js~AutoComposerMidi#_buildMelodyMidiSolo",
    "access": "private",
    "description": "Gets the MIDI data for a given melody.",
    "lineNumber": 158,
    "params": [
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "arrMelody",
        "description": "our melody"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "MIDI data, as a DataURI string"
    }
  },
  {
    "__docId__": 124,
    "kind": "method",
    "name": "buildMelodyMidiWithAccompaniment",
    "memberof": "src/autocomposer-midi.js~AutoComposerMidi",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/autocomposer-midi.js~AutoComposerMidi#buildMelodyMidiWithAccompaniment",
    "access": null,
    "description": "Gets the MIDI data for a given melody, with accompaniment.",
    "lineNumber": 175,
    "params": [
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "arrMelody",
        "description": "main melody"
      },
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "arrAcompanimentLine",
        "description": "accompaniment line"
      },
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "arrBassLine",
        "description": "bass line"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "MIDI data, as a DataURI string."
    }
  },
  {
    "__docId__": 125,
    "kind": "method",
    "name": "playMelodySolo",
    "memberof": "src/autocomposer-midi.js~AutoComposerMidi",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/autocomposer-midi.js~AutoComposerMidi#playMelodySolo",
    "access": null,
    "description": "Plays the given melody.",
    "lineNumber": 200,
    "params": [
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "melodySolo",
        "description": "solo melody (violin)"
      }
    ]
  },
  {
    "__docId__": 126,
    "kind": "method",
    "name": "playMelodyWithAccompaniment",
    "memberof": "src/autocomposer-midi.js~AutoComposerMidi",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/autocomposer-midi.js~AutoComposerMidi#playMelodyWithAccompaniment",
    "access": null,
    "description": "Plays the given melodies.",
    "lineNumber": 210,
    "params": [
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "melodySolo",
        "description": "solo melody (violin)"
      },
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "melodyAccomp",
        "description": "accompaniment melody (piano)"
      },
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "melodyBass",
        "description": "bass melody (bass)"
      }
    ]
  },
  {
    "__docId__": 127,
    "kind": "method",
    "name": "_playMelody",
    "memberof": "src/autocomposer-midi.js~AutoComposerMidi",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/autocomposer-midi.js~AutoComposerMidi#_playMelody",
    "access": "private",
    "description": "Actually plays the given melody",
    "lineNumber": 220,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "strMidi",
        "description": "MIDI data, as a DataURI string."
      }
    ]
  },
  {
    "__docId__": 128,
    "kind": "member",
    "name": "playbackLocked",
    "memberof": "src/autocomposer-midi.js~AutoComposerMidi",
    "static": false,
    "longname": "src/autocomposer-midi.js~AutoComposerMidi#playbackLocked",
    "access": null,
    "description": null,
    "lineNumber": 223,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 129,
    "kind": "method",
    "name": "stopPlayback",
    "memberof": "src/autocomposer-midi.js~AutoComposerMidi",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/autocomposer-midi.js~AutoComposerMidi#stopPlayback",
    "access": null,
    "description": "Stops all playback",
    "lineNumber": 234,
    "params": []
  },
  {
    "__docId__": 130,
    "kind": "file",
    "name": "src/chord-unit.js",
    "content": "var AcLogic = require('../src/autocomposer-logic');\r\nvar AutoComposerLogic = new AcLogic.AutoComposerLogic();\r\n\r\n/**\r\n * Represents some data built around a specific chord.\r\n * Has a reference to the next ChordUnit in the progression, and the chord tones that will be used in melody generation.\r\n */\r\nclass ChordUnit {\r\n    /**\r\n    * @param {string} chord - chord symbol\r\n    * @param {string[]} chordTones - array of notes in the melody\r\n    * @param {ChordUnit} nextChordUnit - next ChordUnit in the chain\r\n    */\r\n  constructor(chord, chordTones, nextChordUnit) {\r\n    /** @type {string} */\r\n    this.chord = chord;\r\n    /** @type {string[]} */\r\n    this.chordTones = chordTones;\r\n    /** @type {ChordUnit} */\r\n    this.nextChordUnit = nextChordUnit;\r\n  }\r\n\r\n    /**\r\n    * @param {ChordUnit} next - the next ChordUnit in the chain.\r\n    */\r\n  setNextChordUnit(next) {\r\n    this.nextChordUnit(next);\r\n  }\r\n}\r\n\r\nexports.ChordUnit = ChordUnit;\r\n",
    "static": true,
    "longname": "src/chord-unit.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 131,
    "kind": "variable",
    "name": "AcLogic",
    "memberof": "src/chord-unit.js",
    "static": true,
    "longname": "src/chord-unit.js~AcLogic",
    "access": null,
    "export": false,
    "importPath": "autocomposer-melody/src/chord-unit.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 132,
    "kind": "variable",
    "name": "AutoComposerLogic",
    "memberof": "src/chord-unit.js",
    "static": true,
    "longname": "src/chord-unit.js~AutoComposerLogic",
    "access": null,
    "export": false,
    "importPath": "autocomposer-melody/src/chord-unit.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 133,
    "kind": "class",
    "name": "ChordUnit",
    "memberof": "src/chord-unit.js",
    "static": true,
    "longname": "src/chord-unit.js~ChordUnit",
    "access": null,
    "export": true,
    "importPath": "autocomposer-melody/src/chord-unit.js",
    "importStyle": "{ChordUnit}",
    "description": "Represents some data built around a specific chord.\nHas a reference to the next ChordUnit in the progression, and the chord tones that will be used in melody generation.",
    "lineNumber": 8,
    "interface": false
  },
  {
    "__docId__": 134,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/chord-unit.js~ChordUnit",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/chord-unit.js~ChordUnit#constructor",
    "access": null,
    "description": "",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "chord",
        "description": "chord symbol"
      },
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "chordTones",
        "description": "array of notes in the melody"
      },
      {
        "nullable": null,
        "types": [
          "ChordUnit"
        ],
        "spread": false,
        "optional": false,
        "name": "nextChordUnit",
        "description": "next ChordUnit in the chain"
      }
    ]
  },
  {
    "__docId__": 135,
    "kind": "member",
    "name": "chord",
    "memberof": "src/chord-unit.js~ChordUnit",
    "static": false,
    "longname": "src/chord-unit.js~ChordUnit#chord",
    "access": null,
    "description": null,
    "lineNumber": 16,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 136,
    "kind": "member",
    "name": "chordTones",
    "memberof": "src/chord-unit.js~ChordUnit",
    "static": false,
    "longname": "src/chord-unit.js~ChordUnit#chordTones",
    "access": null,
    "description": null,
    "lineNumber": 18,
    "type": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 137,
    "kind": "member",
    "name": "nextChordUnit",
    "memberof": "src/chord-unit.js~ChordUnit",
    "static": false,
    "longname": "src/chord-unit.js~ChordUnit#nextChordUnit",
    "access": null,
    "description": null,
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "ChordUnit"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 138,
    "kind": "method",
    "name": "setNextChordUnit",
    "memberof": "src/chord-unit.js~ChordUnit",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/chord-unit.js~ChordUnit#setNextChordUnit",
    "access": null,
    "description": "",
    "lineNumber": 26,
    "params": [
      {
        "nullable": null,
        "types": [
          "ChordUnit"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "the next ChordUnit in the chain."
      }
    ]
  },
  {
    "__docId__": 139,
    "kind": "file",
    "name": "src/melody-unit.js",
    "content": "var range = require('tonal-range')\r\n\r\n/**\r\n * Represents a melody and associated metadata.\r\n */\r\nclass MelodyUnit {\r\n    /**\r\n    * @param {string[]} chordProgression - array of chord symbols\r\n    * @param {string[]} melodyNotes - array of notes in the melody\r\n    */\r\n  constructor(chordProgression, melodyNotes) {\r\n  \t/** @type {string[]} */\r\n    this.chordProgression = chordProgression;\r\n    /** @type {string[]} */\r\n    this.melodyNotes = melodyNotes;\r\n    /** @type {number} */\r\n    this.smoothness = this.getSmoothness();\r\n    /** @type {number} */\r\n    this.range = this.getRange();\r\n    /** @type {string} */\r\n    this.melodyString = this.melodyNotes.join(\" \");\r\n  }\r\n\r\n    /**\r\n    * Calculates the range of this melody.\r\n    * @private\r\n    * @return {number} - Range of the melody (in semitones)\r\n    */\r\n  getRange() {\r\n    var totalRange = range.numeric(this.melodyNotes);\r\n    var highest = Math.max.apply(null, totalRange);\r\n    var lowest = Math.min.apply(null, totalRange);\r\n\r\n    return highest - lowest;\r\n  }\r\n\r\n    /**\r\n    * Calculates the smoothness of this melody.\r\n    * @private\r\n    * @return {number} - Range of the melody (in semitones)\r\n    */\r\n  getSmoothness() {\r\n    var totalSmoothness = 0;\r\n    var subset, subRange, highest, lowest, distance;\r\n\r\n    for(var i = 2; i <= this.melodyNotes.length; i++) {\r\n      subset = this.melodyNotes.slice(i - 2, i);\r\n      subRange = range.numeric(subset);\r\n      highest = Math.max.apply(null, subRange);\r\n      lowest = Math.min.apply(null, subRange);\r\n      distance = highest - lowest;\r\n      totalSmoothness += distance;\r\n    }\r\n\r\n    return totalSmoothness;\r\n  }\r\n\r\n}\r\n\r\nexports.MelodyUnit = MelodyUnit;\r\n",
    "static": true,
    "longname": "src/melody-unit.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 140,
    "kind": "variable",
    "name": "range",
    "memberof": "src/melody-unit.js",
    "static": true,
    "longname": "src/melody-unit.js~range",
    "access": null,
    "export": false,
    "importPath": "autocomposer-melody/src/melody-unit.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 141,
    "kind": "class",
    "name": "MelodyUnit",
    "memberof": "src/melody-unit.js",
    "static": true,
    "longname": "src/melody-unit.js~MelodyUnit",
    "access": null,
    "export": true,
    "importPath": "autocomposer-melody/src/melody-unit.js",
    "importStyle": "{MelodyUnit}",
    "description": "Represents a melody and associated metadata.",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 142,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/melody-unit.js~MelodyUnit",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/melody-unit.js~MelodyUnit#constructor",
    "access": null,
    "description": "",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "chordProgression",
        "description": "array of chord symbols"
      },
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "melodyNotes",
        "description": "array of notes in the melody"
      }
    ]
  },
  {
    "__docId__": 143,
    "kind": "member",
    "name": "chordProgression",
    "memberof": "src/melody-unit.js~MelodyUnit",
    "static": false,
    "longname": "src/melody-unit.js~MelodyUnit#chordProgression",
    "access": null,
    "description": null,
    "lineNumber": 13,
    "type": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 144,
    "kind": "member",
    "name": "melodyNotes",
    "memberof": "src/melody-unit.js~MelodyUnit",
    "static": false,
    "longname": "src/melody-unit.js~MelodyUnit#melodyNotes",
    "access": null,
    "description": null,
    "lineNumber": 15,
    "type": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 145,
    "kind": "member",
    "name": "smoothness",
    "memberof": "src/melody-unit.js~MelodyUnit",
    "static": false,
    "longname": "src/melody-unit.js~MelodyUnit#smoothness",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 146,
    "kind": "member",
    "name": "range",
    "memberof": "src/melody-unit.js~MelodyUnit",
    "static": false,
    "longname": "src/melody-unit.js~MelodyUnit#range",
    "access": null,
    "description": null,
    "lineNumber": 19,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 147,
    "kind": "member",
    "name": "melodyString",
    "memberof": "src/melody-unit.js~MelodyUnit",
    "static": false,
    "longname": "src/melody-unit.js~MelodyUnit#melodyString",
    "access": null,
    "description": null,
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 148,
    "kind": "method",
    "name": "getRange",
    "memberof": "src/melody-unit.js~MelodyUnit",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/melody-unit.js~MelodyUnit#getRange",
    "access": "private",
    "description": "Calculates the range of this melody.",
    "lineNumber": 29,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Range of the melody (in semitones)"
    }
  },
  {
    "__docId__": 149,
    "kind": "method",
    "name": "getSmoothness",
    "memberof": "src/melody-unit.js~MelodyUnit",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/melody-unit.js~MelodyUnit#getSmoothness",
    "access": "private",
    "description": "Calculates the smoothness of this melody.",
    "lineNumber": 42,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Range of the melody (in semitones)"
    }
  },
  {
    "__docId__": 150,
    "kind": "file",
    "name": "src/react/ac-button.js",
    "content": "var React = require('react');\r\n\r\n/**\r\n* React Component representing a simple button\r\n*/\r\nclass AcButton extends React.Component {\r\n  getIconElement() {\r\n    if(this.props.icon) {\r\n      var iconClass;\r\n\r\n      if(this.props.inputLabel) {\r\n        iconClass = \"fa fa-lg fa-\" + this.props.icon;\r\n      } else {\r\n        iconClass = \"fa fa-2x fa-\" + this.props.icon;\r\n      }\r\n      return <i className={iconClass}></i>\r\n    } else {\r\n      return \"\";\r\n    }\r\n  }\r\n\r\n  getLabelElement() {\r\n    if(this.props.inputLabel) {\r\n      var labelElem;\r\n\r\n      if(this.props.icon) {\r\n        labelElem = <span className=\"button-text-icon\">{this.props.inputLabel}</span>\r\n      } else {\r\n        labelElem = this.props.inputLabel;\r\n      }\r\n\r\n      return labelElem\r\n    } else {\r\n      return \"\";\r\n    }\r\n  }\r\n\r\n  render() {\r\n    // This can have a status, passed in from the parent Component\r\n    var buttonClass = this.props.isActive ? \"ac-input button active \" : \"ac-input button\";\r\n    buttonClass += this.props.addClass ? \" \" + this.props.addClass: \"\";\r\n    buttonClass += this.props.disabled ? \" disabled\" : \"\";\r\n\r\n    var wrapperClass = \"ac-control-wrapper\";\r\n    wrapperClass += this.props.wrapperAddClass ? \" \" + this.props.wrapperAddClass: \"\";\r\n\r\n    var lineBreak = this.props.inputLabel && this.props.icon ? <br/> : \"\";\r\n\r\n    if(this.props.noWrapper) {\r\n      return (\r\n        <button className={buttonClass} id={this.props.inputKey} onClick={this.props.onClick} disabled={this.props.disabled} data-payload={this.props.dataPayload}>\r\n          {this.getIconElement()} {lineBreak} {this.getLabelElement()}\r\n        </button>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className={wrapperClass}>\r\n          <button className={buttonClass} id={this.props.inputKey} onClick={this.props.onClick} disabled={this.props.disabled} data-payload={this.props.dataPayload}>\r\n            {this.getIconElement()} {lineBreak} {this.getLabelElement()}\r\n          </button>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = AcButton;\r\n",
    "static": true,
    "longname": "src/react/ac-button.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 151,
    "kind": "variable",
    "name": "React",
    "memberof": "src/react/ac-button.js",
    "static": true,
    "longname": "src/react/ac-button.js~React",
    "access": null,
    "export": false,
    "importPath": "autocomposer-melody/src/react/ac-button.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 152,
    "kind": "class",
    "name": "AcButton",
    "memberof": "src/react/ac-button.js",
    "static": true,
    "longname": "src/react/ac-button.js~AcButton",
    "access": null,
    "export": true,
    "importPath": "autocomposer-melody/src/react/ac-button.js",
    "importStyle": "AcButton",
    "description": "React Component representing a simple button",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "React~React.Component"
    ]
  },
  {
    "__docId__": 153,
    "kind": "method",
    "name": "getIconElement",
    "memberof": "src/react/ac-button.js~AcButton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/react/ac-button.js~AcButton#getIconElement",
    "access": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 154,
    "kind": "method",
    "name": "getLabelElement",
    "memberof": "src/react/ac-button.js~AcButton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/react/ac-button.js~AcButton#getLabelElement",
    "access": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 155,
    "kind": "method",
    "name": "render",
    "memberof": "src/react/ac-button.js~AcButton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/react/ac-button.js~AcButton#render",
    "access": null,
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 156,
    "kind": "file",
    "name": "src/react/ac-checkbox.js",
    "content": "var React = require('react');\r\n\r\n/**\r\n* React Component representing a checkbox\r\n*/\r\nclass AcCheckbox extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"ac-control-wrapper\">\r\n        <label className=\"ac-input-label\" htmlFor={this.props.inputKey}>{this.props.inputLabel}</label>\r\n        <input id={this.props.inputKey} className=\"ac-input checkbox\" name={this.props.inputKey} data-state-key={this.props.inputKey} type=\"checkbox\" checked={this.props.isChecked} onChange={this.props.onChange}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nmodule.exports = AcCheckbox;\r\n",
    "static": true,
    "longname": "src/react/ac-checkbox.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 157,
    "kind": "variable",
    "name": "React",
    "memberof": "src/react/ac-checkbox.js",
    "static": true,
    "longname": "src/react/ac-checkbox.js~React",
    "access": null,
    "export": false,
    "importPath": "autocomposer-melody/src/react/ac-checkbox.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 158,
    "kind": "class",
    "name": "AcCheckbox",
    "memberof": "src/react/ac-checkbox.js",
    "static": true,
    "longname": "src/react/ac-checkbox.js~AcCheckbox",
    "access": null,
    "export": true,
    "importPath": "autocomposer-melody/src/react/ac-checkbox.js",
    "importStyle": "AcCheckbox",
    "description": "React Component representing a checkbox",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "React~React.Component"
    ]
  },
  {
    "__docId__": 159,
    "kind": "method",
    "name": "render",
    "memberof": "src/react/ac-checkbox.js~AcCheckbox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/react/ac-checkbox.js~AcCheckbox#render",
    "access": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 160,
    "kind": "file",
    "name": "src/react/ac-radioset.js",
    "content": "var React = require('react');\r\n\r\n/**\r\n* React Component representing a set of radio buttons\r\n*/\r\nclass AcRadioSet extends React.Component {\r\n  createRadioItems() {\r\n    let items = [];\r\n    var totalOptions = this.props.options;\r\n\r\n    for (var k in totalOptions) {\r\n      if (totalOptions.hasOwnProperty(k)) {\r\n        items.push(\r\n          <label key={\"label-\" + k} >{totalOptions[k]}\r\n            <input key={k} id={this.props.inputKey} name={this.props.inputKey} className=\"ac-input radio\" data-state-key={this.props.inputKey} type=\"radio\" value={k}  onChange={this.props.onChange} />\r\n          </label>\r\n        );\r\n      }\r\n    }\r\n\r\n    return items;\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div className=\"ac-control-wrapper\">\r\n        <fieldset>\r\n          <legend>{this.props.inputLabel}</legend>\r\n          {this.createRadioItems()}\r\n        </fieldset>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nmodule.exports = AcRadioSet;\r\n",
    "static": true,
    "longname": "src/react/ac-radioset.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 161,
    "kind": "variable",
    "name": "React",
    "memberof": "src/react/ac-radioset.js",
    "static": true,
    "longname": "src/react/ac-radioset.js~React",
    "access": null,
    "export": false,
    "importPath": "autocomposer-melody/src/react/ac-radioset.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 162,
    "kind": "class",
    "name": "AcRadioSet",
    "memberof": "src/react/ac-radioset.js",
    "static": true,
    "longname": "src/react/ac-radioset.js~AcRadioSet",
    "access": null,
    "export": true,
    "importPath": "autocomposer-melody/src/react/ac-radioset.js",
    "importStyle": "AcRadioSet",
    "description": "React Component representing a set of radio buttons",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "React~React.Component"
    ]
  },
  {
    "__docId__": 163,
    "kind": "method",
    "name": "createRadioItems",
    "memberof": "src/react/ac-radioset.js~AcRadioSet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/react/ac-radioset.js~AcRadioSet#createRadioItems",
    "access": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 164,
    "kind": "method",
    "name": "render",
    "memberof": "src/react/ac-radioset.js~AcRadioSet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/react/ac-radioset.js~AcRadioSet#render",
    "access": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 165,
    "kind": "file",
    "name": "src/react/ac-select.js",
    "content": "var React = require('react');\r\n\r\n/**\r\n* React Component representing a drop-down selec\r\n*/\r\nclass AcSelect extends React.Component {\r\n  createSelectItems() {\r\n    let items = [];\r\n    var totalOptions = this.props.options;\r\n\r\n    for (var k in totalOptions) {\r\n      if (totalOptions.hasOwnProperty(k)) {\r\n        // alert(\"Key is \" + key + \", value is\" + totalOptions[key]);\r\n        items.push(<option key={k} value={k}>{totalOptions[k]}</option>);\r\n      }\r\n    }\r\n\r\n    return items;\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div className=\"ac-control-wrapper\">\r\n        <label htmlFor={this.props.inputKey} className=\"ac-input-label\">{this.props.inputLabel}</label>\r\n        <select id={this.props.inputKey} className=\"ac-input select\" name={this.props.inputKey} data-state-key={this.props.inputKey} onChange={this.props.onChange}>\r\n          {this.createSelectItems()}\r\n        </select>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nmodule.exports = AcSelect;\r\n",
    "static": true,
    "longname": "src/react/ac-select.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 166,
    "kind": "variable",
    "name": "React",
    "memberof": "src/react/ac-select.js",
    "static": true,
    "longname": "src/react/ac-select.js~React",
    "access": null,
    "export": false,
    "importPath": "autocomposer-melody/src/react/ac-select.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 167,
    "kind": "class",
    "name": "AcSelect",
    "memberof": "src/react/ac-select.js",
    "static": true,
    "longname": "src/react/ac-select.js~AcSelect",
    "access": null,
    "export": true,
    "importPath": "autocomposer-melody/src/react/ac-select.js",
    "importStyle": "AcSelect",
    "description": "React Component representing a drop-down selec",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "React~React.Component"
    ]
  },
  {
    "__docId__": 168,
    "kind": "method",
    "name": "createSelectItems",
    "memberof": "src/react/ac-select.js~AcSelect",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/react/ac-select.js~AcSelect#createSelectItems",
    "access": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 169,
    "kind": "method",
    "name": "render",
    "memberof": "src/react/ac-select.js~AcSelect",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/react/ac-select.js~AcSelect#render",
    "access": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 170,
    "kind": "file",
    "name": "src/react/ac-text-field.js",
    "content": "var React = require('react');\r\n\r\n/**\r\n* React Component representing a text input\r\n*/\r\nclass AcTextField extends React.Component {\r\n  render() {\r\n    var wrapperClass = \"ac-control-wrapper \" + this.props.wrapperAddClass;\r\n\r\n    return (\r\n      <div className={wrapperClass}>\r\n        <label className=\"ac-input-label\" htmlFor={this.props.inputKey}>{this.props.inputLabel}</label>\r\n        <input id={this.props.inputKey} name={this.props.inputKey} data-state-key={this.props.inputKey} className=\"ac-input text\" type=\"text\" value={this.props.value} onChange={this.props.onChange} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nmodule.exports = AcTextField;\r\n",
    "static": true,
    "longname": "src/react/ac-text-field.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 171,
    "kind": "variable",
    "name": "React",
    "memberof": "src/react/ac-text-field.js",
    "static": true,
    "longname": "src/react/ac-text-field.js~React",
    "access": null,
    "export": false,
    "importPath": "autocomposer-melody/src/react/ac-text-field.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 172,
    "kind": "class",
    "name": "AcTextField",
    "memberof": "src/react/ac-text-field.js",
    "static": true,
    "longname": "src/react/ac-text-field.js~AcTextField",
    "access": null,
    "export": true,
    "importPath": "autocomposer-melody/src/react/ac-text-field.js",
    "importStyle": "AcTextField",
    "description": "React Component representing a text input",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "React~React.Component"
    ]
  },
  {
    "__docId__": 173,
    "kind": "method",
    "name": "render",
    "memberof": "src/react/ac-text-field.js~AcTextField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/react/ac-text-field.js~AcTextField#render",
    "access": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 174,
    "kind": "file",
    "name": "src/react/ac-textarea.js",
    "content": "var React = require('react');\r\n\r\n/**\r\n* React Component representing a text area\r\n*/\r\nclass AcTextArea extends React.Component {\r\n  render() {\r\n    var wrapperClass = \"ac-control-wrapper \";\r\n    wrapperClass += this.props.wrapperAddClass ? this.props.wrapperAddClass : \"\";\r\n\r\n    var inputClass = \"ac-input textarea \";\r\n    inputClass += this.props.addClass ? this.props.addClass : \"\";\r\n\r\n    if(this.props.inputLabel) {\r\n      return (\r\n        <div className={wrapperClass}>\r\n          <label className=\"ac-input-label\" htmlFor={this.props.inputKey}>{this.props.inputLabel}</label>\r\n          <textarea id={this.props.inputKey} name={this.props.inputKey} data-state-key={this.props.inputKey} className={inputClass} value={this.props.value} placeholder={this.props.placeholder} onChange={this.props.onChange} />\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className={wrapperClass}>\r\n          <textarea id={this.props.inputKey} name={this.props.inputKey} data-state-key={this.props.inputKey} className={inputClass} value={this.props.value} placeholder={this.props.placeholder} onChange={this.props.onChange} />\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = AcTextArea;\r\n",
    "static": true,
    "longname": "src/react/ac-textarea.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 175,
    "kind": "variable",
    "name": "React",
    "memberof": "src/react/ac-textarea.js",
    "static": true,
    "longname": "src/react/ac-textarea.js~React",
    "access": null,
    "export": false,
    "importPath": "autocomposer-melody/src/react/ac-textarea.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 176,
    "kind": "class",
    "name": "AcTextArea",
    "memberof": "src/react/ac-textarea.js",
    "static": true,
    "longname": "src/react/ac-textarea.js~AcTextArea",
    "access": null,
    "export": true,
    "importPath": "autocomposer-melody/src/react/ac-textarea.js",
    "importStyle": "AcTextArea",
    "description": "React Component representing a text area",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "React~React.Component"
    ]
  },
  {
    "__docId__": 177,
    "kind": "method",
    "name": "render",
    "memberof": "src/react/ac-textarea.js~AcTextArea",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/react/ac-textarea.js~AcTextArea#render",
    "access": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 178,
    "kind": "file",
    "name": "src/react/ac-toggle-button.js",
    "content": "var React = require('react');\r\n\r\n/**\r\n* React Component representing a toggle button\r\n*/\r\nclass AcToggleButton extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isActive: props.initialState === \"true\"\r\n    };\r\n  }\r\n\r\n  handleClick(e) {\r\n    var activeState = this.state.isActive;\r\n    if(typeof this.props.isActive !== \"undefined\" && this.props.isActive !== null) {\r\n      // isActive property overrides actual button state.\r\n      activeState = this.props.isActive;\r\n    }\r\n\r\n    var newActive = !activeState;\r\n\r\n    this.setState({isActive: newActive});\r\n\r\n    this.props.onClickHandler(this.props.inputKey, newActive);\r\n  }\r\n\r\n  getIconElement() {\r\n    if(this.props.icon) {\r\n      var iconClass = \"fa fa-2x fa-\" + this.props.icon;\r\n      return <i className={iconClass}></i>\r\n    } else {\r\n      return \"\";\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var activeState = this.state.isActive;\r\n    if(typeof this.props.isActive !== \"undefined\" && this.props.isActive !== null) {\r\n      // isActive property overrides actual button state.\r\n      activeState = this.props.isActive;\r\n    }\r\n\r\n    var buttonClass = activeState ? \"ac-input button active \" : \"ac-input button\";\r\n    buttonClass += this.props.addClass ? \" \" + this.props.addClass: \"\";\r\n    buttonClass += this.props.disabled ? \" disabled\" : \"\";\r\n\r\n    var wrapperClass = \"ac-control-wrapper\";\r\n    wrapperClass += this.props.wrapperAddClass ? \" \" + this.props.wrapperAddClass: \"\";\r\n\r\n    if(this.props.noWrapper) {\r\n      return (\r\n        <button className={buttonClass} id={this.props.inputKey} data-state-key={this.props.inputKey} data-current-state={this.state.isActive} onClick={(e) => this.handleClick(e)} disabled={this.props.disabled}>\r\n          {this.getIconElement()} {this.props.inputLabel}\r\n        </button>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className={wrapperClass}>\r\n          <button className={buttonClass} id={this.props.inputKey} data-state-key={this.props.inputKey} data-current-state={this.state.isActive} onClick={(e) => this.handleClick(e)} disabled={this.props.disabled}>\r\n            {this.getIconElement()} {this.props.inputLabel}\r\n          </button>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = AcToggleButton;\r\n",
    "static": true,
    "longname": "src/react/ac-toggle-button.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 179,
    "kind": "variable",
    "name": "React",
    "memberof": "src/react/ac-toggle-button.js",
    "static": true,
    "longname": "src/react/ac-toggle-button.js~React",
    "access": null,
    "export": false,
    "importPath": "autocomposer-melody/src/react/ac-toggle-button.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 180,
    "kind": "class",
    "name": "AcToggleButton",
    "memberof": "src/react/ac-toggle-button.js",
    "static": true,
    "longname": "src/react/ac-toggle-button.js~AcToggleButton",
    "access": null,
    "export": true,
    "importPath": "autocomposer-melody/src/react/ac-toggle-button.js",
    "importStyle": "AcToggleButton",
    "description": "React Component representing a toggle button",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "React~React.Component"
    ]
  },
  {
    "__docId__": 181,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/react/ac-toggle-button.js~AcToggleButton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/react/ac-toggle-button.js~AcToggleButton#constructor",
    "access": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 182,
    "kind": "member",
    "name": "state",
    "memberof": "src/react/ac-toggle-button.js~AcToggleButton",
    "static": false,
    "longname": "src/react/ac-toggle-button.js~AcToggleButton#state",
    "access": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "{\"isActive\": *}"
      ]
    }
  },
  {
    "__docId__": 183,
    "kind": "method",
    "name": "handleClick",
    "memberof": "src/react/ac-toggle-button.js~AcToggleButton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/react/ac-toggle-button.js~AcToggleButton#handleClick",
    "access": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "e",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 184,
    "kind": "method",
    "name": "getIconElement",
    "memberof": "src/react/ac-toggle-button.js~AcToggleButton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/react/ac-toggle-button.js~AcToggleButton#getIconElement",
    "access": null,
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 185,
    "kind": "method",
    "name": "render",
    "memberof": "src/react/ac-toggle-button.js~AcToggleButton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/react/ac-toggle-button.js~AcToggleButton#render",
    "access": null,
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 186,
    "kind": "file",
    "name": "src/react/control-panel.js",
    "content": "var React = require('react');\r\n\r\nclass ControlPanel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    // Removed state, since this object isn't being used.\r\n  }\r\n\r\n  render() {\r\n    // The Control Panel isn't being used atm.\r\n    if(this.props.isShown) {\r\n      return (\r\n        <div id=\"control-panel\" className=\"ac-panel output-panel\" style={styleObj}>\r\n          // Nothing here!\r\n        </div>\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = ControlPanel;\r\n",
    "static": true,
    "longname": "src/react/control-panel.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 187,
    "kind": "variable",
    "name": "React",
    "memberof": "src/react/control-panel.js",
    "static": true,
    "longname": "src/react/control-panel.js~React",
    "access": null,
    "export": false,
    "importPath": "autocomposer-melody/src/react/control-panel.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 188,
    "kind": "class",
    "name": "ControlPanel",
    "memberof": "src/react/control-panel.js",
    "static": true,
    "longname": "src/react/control-panel.js~ControlPanel",
    "access": null,
    "export": true,
    "importPath": "autocomposer-melody/src/react/control-panel.js",
    "importStyle": "ControlPanel",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "interface": false,
    "extends": [
      "React~React.Component"
    ]
  },
  {
    "__docId__": 189,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/react/control-panel.js~ControlPanel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/react/control-panel.js~ControlPanel#constructor",
    "access": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 190,
    "kind": "method",
    "name": "render",
    "memberof": "src/react/control-panel.js~ControlPanel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/react/control-panel.js~ControlPanel#render",
    "access": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 191,
    "kind": "file",
    "name": "src/react/debug-panel.js",
    "content": "var React = require('react');\r\n\r\n/**\r\n* React Component representing a debug panel. Renders text in monospace\r\n*/\r\nclass DebugPanel extends React.Component {\r\n  render() {\r\n    if(!this.props.isHidden) {\r\n      return (\r\n        <div id=\"debug-panel\" className=\"ac-panel\">\r\n          <h3>Debug Info</h3>\r\n          <pre>\r\n            {this.props.debugData}\r\n          </pre>\r\n        </div>\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = DebugPanel;\r\n",
    "static": true,
    "longname": "src/react/debug-panel.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 192,
    "kind": "variable",
    "name": "React",
    "memberof": "src/react/debug-panel.js",
    "static": true,
    "longname": "src/react/debug-panel.js~React",
    "access": null,
    "export": false,
    "importPath": "autocomposer-melody/src/react/debug-panel.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 193,
    "kind": "class",
    "name": "DebugPanel",
    "memberof": "src/react/debug-panel.js",
    "static": true,
    "longname": "src/react/debug-panel.js~DebugPanel",
    "access": null,
    "export": true,
    "importPath": "autocomposer-melody/src/react/debug-panel.js",
    "importStyle": "DebugPanel",
    "description": "React Component representing a debug panel. Renders text in monospace",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "React~React.Component"
    ]
  },
  {
    "__docId__": 194,
    "kind": "method",
    "name": "render",
    "memberof": "src/react/debug-panel.js~DebugPanel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/react/debug-panel.js~DebugPanel#render",
    "access": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 195,
    "kind": "file",
    "name": "src/react/help-panel.js",
    "content": "var React = require('react');\r\nvar AutoComposerLogic = require('../autocomposer-logic');\r\nvar AcLogic = new AutoComposerLogic.AutoComposerLogic();\r\n\r\n/**\r\n* React Component representing the Help/Info Panel\r\n*/\r\nclass HelpPanel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      chordArray: AcLogic.getChordDictionary(true)\r\n    }\r\n  }\r\n\r\n  buildChordDictionary() {\r\n    var dictionaryItems = [];\r\n    var ctr = 1;\r\n\r\n    this.state.chordArray.forEach(function(chordString) {\r\n      dictionaryItems.push(<li key={\"chordType\" + ctr}>{chordString}</li>);\r\n      ctr++;\r\n    });\r\n\r\n    return(\r\n      <ul id=\"chord-dictionary\">\r\n        {dictionaryItems}\r\n      </ul>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    var lowestPitch = AcLogic.DEFAULT_LOWER_LIMIT;\r\n    var highestPitch = AcLogic.DEFAULT_UPPER_LIMIT;\r\n\r\n    var lowestPitchAccomp = AcLogic.ACCOMPANIMENT_LOWER_LIMIT;\r\n    var highestPitchAccomp = AcLogic.ACCOMPANIMENT_UPPER_LIMIT;\r\n\r\n    var lowestPitchBass = AcLogic.BASS_LOWER_LIMIT;\r\n    var highestPitchBass = AcLogic.BASS_UPPER_LIMIT;\r\n\r\n    if(this.props.isShown) {\r\n      return (\r\n        <div id=\"help-panel\" className=\"ac-panel output-panel\">\r\n          <div className=\"panel-spacer\">\r\n            <h2>Help!</h2>\r\n            <h4>How to use this web app:</h4>\r\n\r\n            <ol>\r\n              <li>Enter a chord progression in the text box.</li>\r\n              <li>Click the <strong>Generate</strong> button.</li>\r\n              <li>Squeal in delight, as the promised melodies are shown on the screen.</li>\r\n              <li>Click a melody.</li>\r\n              <li>Hit the <i className=\"fa fa-play\"></i> button!</li>\r\n            </ol>\r\n\r\n            <h4>Other features:</h4>\r\n\r\n            <ul>\r\n              <li>You can download the loaded music by clicking the <i className=\"fa fa-download\"></i> button. The melody will be saved as a MIDI file, containing the generated melody and accompaniment.</li>\r\n              <li>You can also save the score as an image. Just right click it and download!</li>\r\n            </ul>\r\n\r\n            <h2>Chord Dictionary</h2>\r\n            <p>These are the chords you can use for this application:</p>\r\n            {this.buildChordDictionary()}\r\n\r\n            <h2>Technical Info</h2>\r\n            <ul>\r\n              <li>Smoothness = the distance between notes in the melody (in semitones), all added together</li>\r\n              <li>Range = distance between the lowest note and the highest note (in semitones)</li>\r\n              <li>The MIDI instruments for the voices are:\r\n                <ul>\r\n                  <li>Violin</li>\r\n                  <li>Piano</li>\r\n                  <li>Bass (plucked)</li>\r\n                </ul>\r\n              </li>\r\n              <li>Melody range is {lowestPitch} to {highestPitch}</li>\r\n              <li>Accompaniment range is {lowestPitchAccomp} to {highestPitch}</li>\r\n              <li>Bass range is {lowestPitchBass} to {highestPitchBass}</li>\r\n            </ul>\r\n\r\n            <h4>Melodies are filtered/sorted by a few rules:</h4>\r\n            <ul>\r\n              <li>Only the 100 smoothest melodies are shown</li>\r\n              <li>Range must be no greater than one octave</li>\r\n              <li>Only one repetition occurs in the melody</li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = HelpPanel;\r\n",
    "static": true,
    "longname": "src/react/help-panel.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 196,
    "kind": "variable",
    "name": "React",
    "memberof": "src/react/help-panel.js",
    "static": true,
    "longname": "src/react/help-panel.js~React",
    "access": null,
    "export": false,
    "importPath": "autocomposer-melody/src/react/help-panel.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 197,
    "kind": "variable",
    "name": "AutoComposerLogic",
    "memberof": "src/react/help-panel.js",
    "static": true,
    "longname": "src/react/help-panel.js~AutoComposerLogic",
    "access": null,
    "export": false,
    "importPath": "autocomposer-melody/src/react/help-panel.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 198,
    "kind": "variable",
    "name": "AcLogic",
    "memberof": "src/react/help-panel.js",
    "static": true,
    "longname": "src/react/help-panel.js~AcLogic",
    "access": null,
    "export": false,
    "importPath": "autocomposer-melody/src/react/help-panel.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 199,
    "kind": "class",
    "name": "HelpPanel",
    "memberof": "src/react/help-panel.js",
    "static": true,
    "longname": "src/react/help-panel.js~HelpPanel",
    "access": null,
    "export": true,
    "importPath": "autocomposer-melody/src/react/help-panel.js",
    "importStyle": "HelpPanel",
    "description": "React Component representing the Help/Info Panel",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "React~React.Component"
    ]
  },
  {
    "__docId__": 200,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/react/help-panel.js~HelpPanel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/react/help-panel.js~HelpPanel#constructor",
    "access": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 201,
    "kind": "member",
    "name": "state",
    "memberof": "src/react/help-panel.js~HelpPanel",
    "static": false,
    "longname": "src/react/help-panel.js~HelpPanel#state",
    "access": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "{\"chordArray\": *}"
      ]
    }
  },
  {
    "__docId__": 202,
    "kind": "method",
    "name": "buildChordDictionary",
    "memberof": "src/react/help-panel.js~HelpPanel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/react/help-panel.js~HelpPanel#buildChordDictionary",
    "access": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 203,
    "kind": "method",
    "name": "render",
    "memberof": "src/react/help-panel.js~HelpPanel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/react/help-panel.js~HelpPanel#render",
    "access": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 204,
    "kind": "file",
    "name": "src/react/melody-row.js",
    "content": "var React = require('react');\r\n\r\n/**\r\n* React Component for a row in the melody reseults table.\r\n*/\r\nclass MelodyRow extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      /** @type {boolean} isSelected - clicked status. */\r\n      isSelected: false\r\n    };\r\n\r\n    /** @type {boolean} isClicked - clicked status. */\r\n    this.isClicked = false;\r\n\r\n    this.selectionEventHandler = this.selectionEventHandler.bind(this);\r\n\r\n    document.body.addEventListener('newSelection', this.selectionEventHandler);\r\n  }\r\n\r\n  /**\r\n  * Sends the melody to the main app. Sets this row's click status.\r\n  */\r\n  clickHandler(event) {\r\n    this.isClicked = true;\r\n    this.props.onClickHandler(event);\r\n  }\r\n\r\n  // the \"newSelection\" event will be triggered on click.\r\n  selectionEventHandler(event) {\r\n    if (this.isClicked) {\r\n      this.setState({isSelected: true});\r\n      this.isClicked = false;\r\n    } else {\r\n      if(this.state.isSelected) {\r\n        this.setState({isSelected: false});\r\n      } else {\r\n        // Not clicked, not selected. Do nothing.\r\n      }\r\n    }\r\n  }\r\n\r\n  createVexTab(arrChords, arrMelody) {\r\n    var vtString, pitchClass;\r\n    var vexTabText = \"options scale=0.8 space=5 font-size=13 font-face=Times\\n\";\r\n    vexTabText += \"tabstave\\n\";\r\n    vexTabText += \"notation=true tablature=false\\n\";\r\n    vexTabText += \"notes :w \";\r\n\r\n    arrMelody.forEach(function(melodyNote) {\r\n      // Turns a note name like \"C#4\" into \"C#/4 |\"\r\n      // Or \"Bb4\" into \"B@/4 |\"\r\n      // VexTab notation sure is odd.\r\n      pitchClass = melodyNote.slice(0, -1);\r\n      pitchClass = pitchClass.replace(\"b\", \"@\");\r\n\r\n      vtString = pitchClass + \"/\"+ melodyNote.slice(-1) + \" \";\r\n      vexTabText += vtString;\r\n    });\r\n\r\n    vexTabText = vexTabText.slice(0, -1) + \"\\n\";\r\n    vexTabText += \"text :w, \";\r\n\r\n    arrChords.forEach(function(chordSymbol) {\r\n      vtString = chordSymbol + \", \";\r\n      vexTabText += vtString;\r\n    });\r\n\r\n    vexTabText = vexTabText.slice(0, -2);\r\n\r\n    return vexTabText;\r\n  }\r\n\r\n  render() {\r\n    var cName = \"ac-melody-row\";\r\n    cName += this.state.isSelected ? \" selected\" : \"\";\r\n\r\n    return (\r\n      <tr className={cName} onClick={(e) => this.clickHandler(e)} data-payload={this.props.dataPayload}>\r\n        <td>\r\n          <div className=\"vex-tabdiv\">\r\n            {this.createVexTab(this.props.chordProgression, this.props.melodyNotes)}\r\n          </div>\r\n        </td>\r\n        <td className=\"melody-data\">{this.props.smoothness}</td>\r\n        <td className=\"melody-data\">{this.props.range}</td>\r\n      </tr>\r\n    );\r\n  }\r\n}\r\n\r\nmodule.exports = MelodyRow;\r\n",
    "static": true,
    "longname": "src/react/melody-row.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 205,
    "kind": "variable",
    "name": "React",
    "memberof": "src/react/melody-row.js",
    "static": true,
    "longname": "src/react/melody-row.js~React",
    "access": null,
    "export": false,
    "importPath": "autocomposer-melody/src/react/melody-row.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 206,
    "kind": "class",
    "name": "MelodyRow",
    "memberof": "src/react/melody-row.js",
    "static": true,
    "longname": "src/react/melody-row.js~MelodyRow",
    "access": null,
    "export": true,
    "importPath": "autocomposer-melody/src/react/melody-row.js",
    "importStyle": "MelodyRow",
    "description": "React Component for a row in the melody reseults table.",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "React~React.Component"
    ]
  },
  {
    "__docId__": 207,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/react/melody-row.js~MelodyRow",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/react/melody-row.js~MelodyRow#constructor",
    "access": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 208,
    "kind": "member",
    "name": "state",
    "memberof": "src/react/melody-row.js~MelodyRow",
    "static": false,
    "longname": "src/react/melody-row.js~MelodyRow#state",
    "access": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "{\"isSelected\": *}"
      ]
    }
  },
  {
    "__docId__": 209,
    "kind": "member",
    "name": "isClicked",
    "memberof": "src/react/melody-row.js~MelodyRow",
    "static": false,
    "longname": "src/react/melody-row.js~MelodyRow#isClicked",
    "access": null,
    "description": null,
    "lineNumber": 16,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 210,
    "kind": "member",
    "name": "selectionEventHandler",
    "memberof": "src/react/melody-row.js~MelodyRow",
    "static": false,
    "longname": "src/react/melody-row.js~MelodyRow#selectionEventHandler",
    "access": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 211,
    "kind": "method",
    "name": "clickHandler",
    "memberof": "src/react/melody-row.js~MelodyRow",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/react/melody-row.js~MelodyRow#clickHandler",
    "access": null,
    "description": "Sends the melody to the main app. Sets this row's click status.",
    "lineNumber": 26,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 212,
    "kind": "member",
    "name": "isClicked",
    "memberof": "src/react/melody-row.js~MelodyRow",
    "static": false,
    "longname": "src/react/melody-row.js~MelodyRow#isClicked",
    "access": null,
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 213,
    "kind": "method",
    "name": "selectionEventHandler",
    "memberof": "src/react/melody-row.js~MelodyRow",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/react/melody-row.js~MelodyRow#selectionEventHandler",
    "access": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 214,
    "kind": "member",
    "name": "isClicked",
    "memberof": "src/react/melody-row.js~MelodyRow",
    "static": false,
    "longname": "src/react/melody-row.js~MelodyRow#isClicked",
    "access": null,
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 215,
    "kind": "method",
    "name": "createVexTab",
    "memberof": "src/react/melody-row.js~MelodyRow",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/react/melody-row.js~MelodyRow#createVexTab",
    "access": null,
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "arrChords",
        "types": [
          "*"
        ]
      },
      {
        "name": "arrMelody",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 216,
    "kind": "method",
    "name": "render",
    "memberof": "src/react/melody-row.js~MelodyRow",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/react/melody-row.js~MelodyRow#render",
    "access": null,
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 217,
    "kind": "file",
    "name": "src/react/output-panel.js",
    "content": "var React = require('react');\r\n\r\nvar AutoComposerMelody = require('../autocomposer-melody');\r\nvar AcMelody = new AutoComposerMelody.AutoComposerMelody();\r\n\r\nvar MelodyRow = require('./melody-row');\r\nvar AcButton = require('./ac-button');\r\n\r\nclass OutputPanel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      melodyUnitList: null\r\n    }\r\n\r\n    this.loadMelody = this.loadMelody.bind(this);\r\n  }\r\n\r\n  loadMelody(event) {\r\n    // callback from the main app object\r\n    this.props.loadMelody(event);\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    if(nextProps.allowMelodyGeneration) {\r\n      console.debug(\"[OutputPanel.shouldComponentUpdate()] Component is updating...\");\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps, nextState){\r\n    if(nextProps.allowMelodyGeneration) {\r\n      console.debug(\"[OutputPanel.componentWillReceiveProps()] Generating melodies...\");\r\n      var chordProgression = nextProps.chordProgression;\r\n      this.setState({melodyUnitList: AcMelody.getMelodies(chordProgression)});\r\n    }\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    window.VexTabDiv.Div.start();\r\n    this.props.outputCallback();\r\n  }\r\n\r\n  createMelodyRows() {\r\n    var melodyUnitList = this.state.melodyUnitList;\r\n    var melodyRows = [];\r\n    var melodyString, accompanimentString, basslineString, payloadString, arrPayload, rawProgression, rawNotes;\r\n\r\n    for(var i = 0; i < melodyUnitList.length; i++) {\r\n      melodyString = melodyUnitList[i].melodyNotes.join(\",\");\r\n      accompanimentString = AcMelody.getAccompaniment(melodyUnitList[i]).join(\",\");\r\n      basslineString = AcMelody.getBasicBassLine(melodyUnitList[i]);\r\n\r\n      arrPayload = [melodyString, accompanimentString, basslineString];\r\n      payloadString = arrPayload.join(\";\");\r\n\r\n      rawProgression = melodyUnitList[i].chordProgression;\r\n      rawNotes = melodyUnitList[i].melodyNotes;\r\n\r\n      melodyRows.push(\r\n        <MelodyRow key={\"m-row-\" + i} onClickHandler={this.props.loadMelody} dataPayload={payloadString} chordProgression={rawProgression}  melodyNotes={rawNotes} smoothness={melodyUnitList[i].smoothness} range={melodyUnitList[i].range}/>\r\n      );\r\n    }\r\n\r\n    return melodyRows;\r\n  }\r\n\r\n  render() {\r\n    if(this.props.isShown) {\r\n      console.debug('[OutputPanel.render()] creating table...');\r\n\r\n      return (\r\n        <div id=\"output-panel\" className=\"ac-panel output-panel\">\r\n          <table id=\"ac-melody-output\">\r\n            <thead>\r\n              <tr>\r\n                <th>Melody</th>\r\n                <th className=\"melody-data\">Smoothness</th>\r\n                <th className=\"melody-data\">Range</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {this.createMelodyRows()}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div id=\"output-panel\" className=\"ac-panel output-panel\">\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = OutputPanel;\r\n",
    "static": true,
    "longname": "src/react/output-panel.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 218,
    "kind": "variable",
    "name": "React",
    "memberof": "src/react/output-panel.js",
    "static": true,
    "longname": "src/react/output-panel.js~React",
    "access": null,
    "export": false,
    "importPath": "autocomposer-melody/src/react/output-panel.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 219,
    "kind": "variable",
    "name": "AutoComposerMelody",
    "memberof": "src/react/output-panel.js",
    "static": true,
    "longname": "src/react/output-panel.js~AutoComposerMelody",
    "access": null,
    "export": false,
    "importPath": "autocomposer-melody/src/react/output-panel.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 220,
    "kind": "variable",
    "name": "AcMelody",
    "memberof": "src/react/output-panel.js",
    "static": true,
    "longname": "src/react/output-panel.js~AcMelody",
    "access": null,
    "export": false,
    "importPath": "autocomposer-melody/src/react/output-panel.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 221,
    "kind": "variable",
    "name": "MelodyRow",
    "memberof": "src/react/output-panel.js",
    "static": true,
    "longname": "src/react/output-panel.js~MelodyRow",
    "access": null,
    "export": false,
    "importPath": "autocomposer-melody/src/react/output-panel.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 222,
    "kind": "variable",
    "name": "AcButton",
    "memberof": "src/react/output-panel.js",
    "static": true,
    "longname": "src/react/output-panel.js~AcButton",
    "access": null,
    "export": false,
    "importPath": "autocomposer-melody/src/react/output-panel.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 223,
    "kind": "class",
    "name": "OutputPanel",
    "memberof": "src/react/output-panel.js",
    "static": true,
    "longname": "src/react/output-panel.js~OutputPanel",
    "access": null,
    "export": true,
    "importPath": "autocomposer-melody/src/react/output-panel.js",
    "importStyle": "OutputPanel",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "interface": false,
    "extends": [
      "React~React.Component"
    ]
  },
  {
    "__docId__": 224,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/react/output-panel.js~OutputPanel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/react/output-panel.js~OutputPanel#constructor",
    "access": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 225,
    "kind": "member",
    "name": "state",
    "memberof": "src/react/output-panel.js~OutputPanel",
    "static": false,
    "longname": "src/react/output-panel.js~OutputPanel#state",
    "access": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "{\"melodyUnitList\": *}"
      ]
    }
  },
  {
    "__docId__": 226,
    "kind": "member",
    "name": "loadMelody",
    "memberof": "src/react/output-panel.js~OutputPanel",
    "static": false,
    "longname": "src/react/output-panel.js~OutputPanel#loadMelody",
    "access": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 227,
    "kind": "method",
    "name": "loadMelody",
    "memberof": "src/react/output-panel.js~OutputPanel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/react/output-panel.js~OutputPanel#loadMelody",
    "access": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 228,
    "kind": "method",
    "name": "shouldComponentUpdate",
    "memberof": "src/react/output-panel.js~OutputPanel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/react/output-panel.js~OutputPanel#shouldComponentUpdate",
    "access": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "nextProps",
        "types": [
          "*"
        ]
      },
      {
        "name": "nextState",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 229,
    "kind": "method",
    "name": "componentWillReceiveProps",
    "memberof": "src/react/output-panel.js~OutputPanel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/react/output-panel.js~OutputPanel#componentWillReceiveProps",
    "access": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "nextProps",
        "types": [
          "*"
        ]
      },
      {
        "name": "nextState",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 230,
    "kind": "method",
    "name": "componentDidUpdate",
    "memberof": "src/react/output-panel.js~OutputPanel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/react/output-panel.js~OutputPanel#componentDidUpdate",
    "access": null,
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 231,
    "kind": "method",
    "name": "createMelodyRows",
    "memberof": "src/react/output-panel.js~OutputPanel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/react/output-panel.js~OutputPanel#createMelodyRows",
    "access": null,
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 232,
    "kind": "method",
    "name": "render",
    "memberof": "src/react/output-panel.js~OutputPanel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/react/output-panel.js~OutputPanel#render",
    "access": null,
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 233,
    "kind": "file",
    "name": "src/react/status-output.js",
    "content": "var React = require('react');\r\n\r\n/**\r\n* React Component representing the status output\r\n*/\r\nclass StatusOutput extends React.Component {\r\n  /**\r\n  * Default constructor\r\n  * @param {Object} props - Properties for this React component\r\n  */\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.NUM_MESSAGES = 5;\r\n    this.state = {\r\n      statusMessages: [\"Initializing...\"]\r\n    }\r\n    this.statusEventHandler = this.statusEventHandler.bind(this);\r\n    document.body.addEventListener('statusUpdate', this.statusEventHandler);\r\n  }\r\n\r\n  /**\r\n  * Event handler for status updates.\r\n  * @param {Object} event - Event\r\n  */\r\n  statusEventHandler(event) {\r\n    var message = event.detail;\r\n    var currentMessages = this.state.statusMessages;\r\n    currentMessages.push(message);\r\n\r\n    if(currentMessages.length > this.NUM_MESSAGES) {\r\n      currentMessages = currentMessages.slice(-5);\r\n    }\r\n\r\n    this.setState({statusMessages: currentMessages});\r\n  }\r\n\r\n  buildStatusOutput() {\r\n    var msg, line, lineClass, output = []\r\n    var messages = this.state.statusMessages\r\n\r\n    for(var i = messages.length - 1; i >= 0; i--) {\r\n      msg = messages[i];\r\n      lineClass = \"line\";\r\n      lineClass += msg.search(/error/ig) != -1 ? \" hasError\" : \"\";\r\n      if(i == messages.length - 1) {\r\n        lineClass += \" first\"\r\n      }\r\n\r\n      line = <span key={\"message-line-\" + i} className={lineClass}>{msg}<br/></span>\r\n      output.push(line);\r\n    }\r\n    return output;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"ac-control-wrapper status-output\">\r\n        <p id={this.props.inputKey} name={this.props.inputKey} data-state-key={this.props.inputKey} className=\"ac-output text\">\r\n          {this.buildStatusOutput()}\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nmodule.exports = StatusOutput;\r\n",
    "static": true,
    "longname": "src/react/status-output.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 234,
    "kind": "variable",
    "name": "React",
    "memberof": "src/react/status-output.js",
    "static": true,
    "longname": "src/react/status-output.js~React",
    "access": null,
    "export": false,
    "importPath": "autocomposer-melody/src/react/status-output.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 235,
    "kind": "class",
    "name": "StatusOutput",
    "memberof": "src/react/status-output.js",
    "static": true,
    "longname": "src/react/status-output.js~StatusOutput",
    "access": null,
    "export": true,
    "importPath": "autocomposer-melody/src/react/status-output.js",
    "importStyle": "StatusOutput",
    "description": "React Component representing the status output",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "React~React.Component"
    ]
  },
  {
    "__docId__": 236,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/react/status-output.js~StatusOutput",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/react/status-output.js~StatusOutput#constructor",
    "access": null,
    "description": "Default constructor",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "Properties for this React component"
      }
    ]
  },
  {
    "__docId__": 237,
    "kind": "member",
    "name": "NUM_MESSAGES",
    "memberof": "src/react/status-output.js~StatusOutput",
    "static": false,
    "longname": "src/react/status-output.js~StatusOutput#NUM_MESSAGES",
    "access": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 238,
    "kind": "member",
    "name": "state",
    "memberof": "src/react/status-output.js~StatusOutput",
    "static": false,
    "longname": "src/react/status-output.js~StatusOutput#state",
    "access": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "{\"statusMessages\": *}"
      ]
    }
  },
  {
    "__docId__": 239,
    "kind": "member",
    "name": "statusEventHandler",
    "memberof": "src/react/status-output.js~StatusOutput",
    "static": false,
    "longname": "src/react/status-output.js~StatusOutput#statusEventHandler",
    "access": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 240,
    "kind": "method",
    "name": "statusEventHandler",
    "memberof": "src/react/status-output.js~StatusOutput",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/react/status-output.js~StatusOutput#statusEventHandler",
    "access": null,
    "description": "Event handler for status updates.",
    "lineNumber": 26,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "Event"
      }
    ]
  },
  {
    "__docId__": 241,
    "kind": "method",
    "name": "buildStatusOutput",
    "memberof": "src/react/status-output.js~StatusOutput",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/react/status-output.js~StatusOutput#buildStatusOutput",
    "access": null,
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 242,
    "kind": "method",
    "name": "render",
    "memberof": "src/react/status-output.js~StatusOutput",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/react/status-output.js~StatusOutput#render",
    "access": null,
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 244,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Infinity",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 245,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~NaN",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 246,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~undefined",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 247,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~null",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 248,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 249,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 250,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 251,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 252,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 253,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 254,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Symbol",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 255,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Error",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 256,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~EvalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 257,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~InternalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 258,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RangeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 259,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ReferenceError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 260,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~SyntaxError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 261,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~TypeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 262,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~URIError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 263,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 264,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 265,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Date",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 266,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~String",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 267,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~string",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 268,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RegExp",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 269,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 270,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 271,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 272,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8ClampedArray",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 273,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 274,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 275,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 276,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 277,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 278,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float64Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 279,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Map",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 280,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Set",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 281,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakMap",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 282,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakSet",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 283,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ArrayBuffer",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 284,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~DataView",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 285,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~JSON",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 286,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Promise",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 287,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Generator",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 288,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~GeneratorFunction",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 289,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Reflect",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 290,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Proxy",
    "access": null,
    "description": "",
    "lineNumber": 193,
    "builtinExternal": true
  },
  {
    "__docId__": 292,
    "kind": "external",
    "name": "CanvasRenderingContext2D",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~CanvasRenderingContext2D",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 293,
    "kind": "external",
    "name": "DocumentFragment",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~DocumentFragment",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 294,
    "kind": "external",
    "name": "Element",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Element",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~Element",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 295,
    "kind": "external",
    "name": "Event",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Event",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~Event",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 296,
    "kind": "external",
    "name": "Node",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Node",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~Node",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 297,
    "kind": "external",
    "name": "NodeList",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~NodeList",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 298,
    "kind": "external",
    "name": "XMLHttpRequest",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~XMLHttpRequest",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 299,
    "kind": "external",
    "name": "AudioContext",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/AudioContext",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~AudioContext",
    "access": null,
    "description": "",
    "lineNumber": 34,
    "builtinExternal": true
  },
  {
    "__docId__": 300,
    "kind": "testFile",
    "name": "test/autocomposer-logic.js",
    "content": "var assert = require('assert');\r\n\r\nvar AcLogic = require('../src/autocomposer-logic');\r\nvar AutoComposerLogic = new AcLogic.AutoComposerLogic();\r\n\r\ndescribe('AutoComposerLogic', function() {\r\n  describe('#filterMelodyRange', function() {\r\n    it('should filter out melodies that have a range larger than an octave', function() {\r\n      // The filter function runs on each note addition for the melody generating function.\r\n      // So it should only be expected to look at the difference between the last two notes.\r\n\r\n      melodySmallRange = \"C4 G4 A4\";\r\n      melodyOctaveRange = \"G4 C4 C5\";\r\n      melodyBigRange = \"G4 C4 D5\";\r\n\r\n      assert.equal(AutoComposerLogic.filterMelodyRange(melodySmallRange), true);\r\n      assert.equal(AutoComposerLogic.filterMelodyRange(melodyOctaveRange), true);\r\n      assert.equal(AutoComposerLogic.filterMelodyRange(melodyBigRange), false);\r\n    });\r\n  });\r\n\r\n  describe('#filterRepetition', function() {\r\n    it('should filter out melodies that are too repetitive', function() {\r\n      melodyNoRepeats = \"C4 G4 A4 E5\";\r\n      melodyOneRepeat = \"C4 G4 G4 C5 E5\";\r\n      melodyTwoRepeats = \"C4 C4 G4 D5 D5 E3\";\r\n      melodyTwoSuccessiveRepeats = \"C4 G4 G4 G4 D5 C5\";\r\n\r\n      assert.equal(AutoComposerLogic.filterRepetition(melodyNoRepeats), true);\r\n      assert.equal(AutoComposerLogic.filterRepetition(melodyOneRepeat), true);\r\n      assert.equal(AutoComposerLogic.filterRepetition(melodyTwoRepeats), false);\r\n      assert.equal(AutoComposerLogic.filterRepetition(melodyTwoSuccessiveRepeats), false);\r\n    });\r\n  });\r\n\r\n  describe('#isValidText', function() {\r\n    it('should return true for chord inputs', function() {\r\n      assert.equal(AutoComposerLogic.isValidText('Gm7'), true);\r\n      assert.equal(AutoComposerLogic.isValidText('C'), true);\r\n      assert.equal(AutoComposerLogic.isValidText('D7'), true);\r\n      assert.equal(AutoComposerLogic.isValidText('A#m7b5'), true);\r\n    });\r\n\r\n    it('should return false for non-chord inputs', function() {\r\n      assert.equal(AutoComposerLogic.isValidText('H2'), false);\r\n      assert.equal(AutoComposerLogic.isValidText('456456'), false);\r\n      assert.equal(AutoComposerLogic.isValidText('Something really silly'), false);\r\n    });\r\n  });\r\n\r\n  describe('#convertAsciiAccidentalsToHtml', function() {\r\n    it('should convert ASCII accidentals to Unicode HTML entities', function() {\r\n      assert.equal(AutoComposerLogic.convertAsciiAccidentalsToHtml('Bb'), 'B&#9837;');\r\n      assert.equal(AutoComposerLogic.convertAsciiAccidentalsToHtml('C#'), 'C&#9839;');\r\n      assert.equal(AutoComposerLogic.convertAsciiAccidentalsToHtml('Fo'), 'F&‌deg;');\r\n    });\r\n  });\r\n\r\n  describe('#convertAsciiAccidentalsToText', function() {\r\n    it('should convert ASCII accentals to Unicode versions', function() {\r\n      assert.equal(AutoComposerLogic.convertAsciiAccidentalsToText('Bb'), 'B♭');\r\n      assert.equal(AutoComposerLogic.convertAsciiAccidentalsToText('C#'), 'C♯');\r\n      assert.equal(AutoComposerLogic.convertAsciiAccidentalsToText('Fo'), 'F°');\r\n    });\r\n  });\r\n\r\n  describe('#convertAccidentalsToAscii', function() {\r\n    it('should convert Unicode accentals to ASCII versions', function() {\r\n      assert.equal(AutoComposerLogic.convertAccidentalsToAscii('B♭'), 'Bb');\r\n      assert.equal(AutoComposerLogic.convertAccidentalsToAscii('C♯'), 'C#');\r\n      assert.equal(AutoComposerLogic.convertAccidentalsToAscii('F°'), 'Fo');\r\n    });\r\n  });\r\n});\r\n",
    "static": true,
    "longname": "test/autocomposer-logic.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 301,
    "kind": "testDescribe",
    "name": "describe0",
    "testId": 0,
    "memberof": "test/autocomposer-logic.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/autocomposer-logic.js~describe0",
    "access": null,
    "description": "AutoComposerLogic",
    "lineNumber": 6
  },
  {
    "__docId__": 302,
    "kind": "testDescribe",
    "name": "describe1",
    "testId": 1,
    "memberof": "test/autocomposer-logic.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/autocomposer-logic.js~describe0.describe1",
    "access": null,
    "description": "#filterMelodyRange",
    "lineNumber": 7
  },
  {
    "__docId__": 303,
    "kind": "testIt",
    "name": "it2",
    "testId": 2,
    "memberof": "test/autocomposer-logic.js~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "test/autocomposer-logic.js~describe0.describe1.it2",
    "access": null,
    "description": "should filter out melodies that have a range larger than an octave",
    "lineNumber": 8
  },
  {
    "__docId__": 304,
    "kind": "testDescribe",
    "name": "describe3",
    "testId": 3,
    "memberof": "test/autocomposer-logic.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/autocomposer-logic.js~describe0.describe3",
    "access": null,
    "description": "#filterRepetition",
    "lineNumber": 22
  },
  {
    "__docId__": 305,
    "kind": "testIt",
    "name": "it4",
    "testId": 4,
    "memberof": "test/autocomposer-logic.js~describe0.describe3",
    "testDepth": 2,
    "static": true,
    "longname": "test/autocomposer-logic.js~describe0.describe3.it4",
    "access": null,
    "description": "should filter out melodies that are too repetitive",
    "lineNumber": 23
  },
  {
    "__docId__": 306,
    "kind": "testDescribe",
    "name": "describe5",
    "testId": 5,
    "memberof": "test/autocomposer-logic.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/autocomposer-logic.js~describe0.describe5",
    "access": null,
    "description": "#isValidText",
    "lineNumber": 36
  },
  {
    "__docId__": 307,
    "kind": "testIt",
    "name": "it6",
    "testId": 6,
    "memberof": "test/autocomposer-logic.js~describe0.describe5",
    "testDepth": 2,
    "static": true,
    "longname": "test/autocomposer-logic.js~describe0.describe5.it6",
    "access": null,
    "description": "should return true for chord inputs",
    "lineNumber": 37
  },
  {
    "__docId__": 308,
    "kind": "testIt",
    "name": "it7",
    "testId": 7,
    "memberof": "test/autocomposer-logic.js~describe0.describe5",
    "testDepth": 2,
    "static": true,
    "longname": "test/autocomposer-logic.js~describe0.describe5.it7",
    "access": null,
    "description": "should return false for non-chord inputs",
    "lineNumber": 44
  },
  {
    "__docId__": 309,
    "kind": "testDescribe",
    "name": "describe8",
    "testId": 8,
    "memberof": "test/autocomposer-logic.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/autocomposer-logic.js~describe0.describe8",
    "access": null,
    "description": "#convertAsciiAccidentalsToHtml",
    "lineNumber": 51
  },
  {
    "__docId__": 310,
    "kind": "testIt",
    "name": "it9",
    "testId": 9,
    "memberof": "test/autocomposer-logic.js~describe0.describe8",
    "testDepth": 2,
    "static": true,
    "longname": "test/autocomposer-logic.js~describe0.describe8.it9",
    "access": null,
    "description": "should convert ASCII accidentals to Unicode HTML entities",
    "lineNumber": 52
  },
  {
    "__docId__": 311,
    "kind": "testDescribe",
    "name": "describe10",
    "testId": 10,
    "memberof": "test/autocomposer-logic.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/autocomposer-logic.js~describe0.describe10",
    "access": null,
    "description": "#convertAsciiAccidentalsToText",
    "lineNumber": 59
  },
  {
    "__docId__": 312,
    "kind": "testIt",
    "name": "it11",
    "testId": 11,
    "memberof": "test/autocomposer-logic.js~describe0.describe10",
    "testDepth": 2,
    "static": true,
    "longname": "test/autocomposer-logic.js~describe0.describe10.it11",
    "access": null,
    "description": "should convert ASCII accentals to Unicode versions",
    "lineNumber": 60
  },
  {
    "__docId__": 313,
    "kind": "testDescribe",
    "name": "describe12",
    "testId": 12,
    "memberof": "test/autocomposer-logic.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/autocomposer-logic.js~describe0.describe12",
    "access": null,
    "description": "#convertAccidentalsToAscii",
    "lineNumber": 67
  },
  {
    "__docId__": 314,
    "kind": "testIt",
    "name": "it13",
    "testId": 13,
    "memberof": "test/autocomposer-logic.js~describe0.describe12",
    "testDepth": 2,
    "static": true,
    "longname": "test/autocomposer-logic.js~describe0.describe12.it13",
    "access": null,
    "description": "should convert Unicode accentals to ASCII versions",
    "lineNumber": 68
  },
  {
    "__docId__": 315,
    "kind": "testFile",
    "name": "test/autocomposer-melody.js",
    "content": "var assert = require('assert');\r\nconst _ = require('underscore');\r\n\r\nvar AcMelody = require('../src/autocomposer-melody');\r\nvar AutoComposerMelody = new AcMelody.AutoComposerMelody();\r\n\r\nAutoComposerMelody._sendStatusUpdate = function() {\r\n  // Overriding this function with nothing since it contains browser code.\r\n}\r\n\r\nvar AutoComposerLogic = require('../src/autocomposer-logic');\r\nvar AcLogic = new AutoComposerLogic.AutoComposerLogic();\r\n\r\nvar TEST_CHORD_1 = \"Gm7\";\r\nvar TEST_CHORD_2 = \"Cm7\";\r\nvar TEST_CHORD_3 = \"D7\";\r\n\r\nvar TEST_LOWER_LIMIT_1 = \"Bb3\";\r\nvar TEST_UPPER_LIMIT_1 = \"G#4\";\r\n\r\nvar TEST_LOWER_LIMIT_2 = \"Ab4\";\r\nvar TEST_UPPER_LIMIT_2 = \"B5\";\r\n\r\ndescribe('AutoComposerMelody', function() {\r\n  describe('#getAllChordTones', function() {\r\n    it('should return all chord tones in the range (inclusive)', function() {\r\n      expectedTones1 = [\"Bb3\", \"D4\", \"F4\", \"G4\"];\r\n      expectedTones2 = [\"A4\", \"C5\", \"D5\", \"F#5\", \"A5\"];\r\n\r\n      resultTones1 = AutoComposerMelody.getAllChordTones(TEST_CHORD_1, TEST_LOWER_LIMIT_1, TEST_UPPER_LIMIT_1);\r\n      resultTones2 = AutoComposerMelody.getAllChordTones(TEST_CHORD_3, TEST_LOWER_LIMIT_2, TEST_UPPER_LIMIT_2);\r\n\r\n      assert.deepEqual(resultTones1, expectedTones1);\r\n      assert.deepEqual(resultTones2, expectedTones2);\r\n    });\r\n  });\r\n\r\n  describe('#buildChordUnitList', function() {\r\n    it('should return a list of ChordUnits for a given progression', function() {\r\n      var expChordUnit3 = {\r\n        chord: \"D7\",\r\n        chordTones: [\"A4\", \"C5\", \"D5\", \"F#5\", \"A5\"],\r\n      };\r\n      var expChordUnit2 = {\r\n        chord: \"Cm7\",\r\n        chordTones: [\"Bb4\", \"C5\", \"Eb5\", \"G5\", \"Bb5\"],\r\n      };\r\n      var expChordUnit1 = {\r\n        chord: \"Gm7\",\r\n        chordTones: [\"Bb4\", \"D5\", \"F5\", \"G5\", \"Bb5\"],\r\n      };\r\n\r\n      var expectedArray = [expChordUnit1, expChordUnit2, expChordUnit3];\r\n      var chordProgression = [\"Gm7\",\"Cm7\",\"D7\"];\r\n      var chordUnitList = AutoComposerMelody.buildChordUnitList(chordProgression, TEST_LOWER_LIMIT_2, TEST_UPPER_LIMIT_2);\r\n\r\n      assert.deepEqual(chordUnitList[0].chordTones, expectedArray[0].chordTones);\r\n      assert.deepEqual(chordUnitList[1].chordTones, expectedArray[1].chordTones);\r\n      assert.deepEqual(chordUnitList[2].chordTones, expectedArray[2].chordTones);\r\n    });\r\n  });\r\n\r\n  describe('#buildMelodyUnit', function() {\r\n    it('should build a melody unit with metadata for each raw melody', function() {\r\n      var chordProgression = [\"G\", \"Em\", \"C\", \"D\"];\r\n      var melody1 = \"B3 G4 E4 F#4\";\r\n      var melody2 = \"G4 B4 C5 D5\";\r\n\r\n      exp1 = {\r\n        chordProgression: chordProgression,\r\n        melodyNotes: melody1.split(\" \"),\r\n        smoothness: 13,\r\n        range: 8,\r\n        melodyString: melody1\r\n      }\r\n\r\n      exp2 = {\r\n        chordProgression: chordProgression,\r\n        melodyNotes: melody2.split(\" \"),\r\n        smoothness: 7,\r\n        range: 7,\r\n        melodyString: melody2\r\n      }\r\n\r\n      result1 = AutoComposerMelody.buildMelodyUnit(chordProgression, melody1);\r\n      result2 = AutoComposerMelody.buildMelodyUnit(chordProgression, melody2);\r\n\r\n      assert.deepEqual(result1, exp1);\r\n      assert.deepEqual(result2, exp2);\r\n    });\r\n  });\r\n\r\n  describe('#buildMelodyUnitList', function() {\r\n    var chordProgression = [\"G\", \"Em\", \"C\", \"D\"];\r\n    var melodies = [\"B3 G4 E4 F#4\", \"G4 B4 C5 D5\", \"G4 G4 G4 F#4\", \"G5 G5 G5 A5\"];\r\n\r\n    it('should sort the output if specified', function() {\r\n      resultSorted = AutoComposerMelody.buildMelodyUnitList(chordProgression, melodies, {sort: true});\r\n\r\n      assert(resultSorted[0].smoothness < resultSorted[3].smoothness);\r\n    });\r\n\r\n    it('should limit the output if specified', function() {\r\n      var numLimit = 2;\r\n      result = AutoComposerMelody.buildMelodyUnitList(chordProgression, melodies, {limit: numLimit});\r\n\r\n      assert.equal(result.length, numLimit);\r\n    });\r\n  });\r\n\r\n  describe('#getMelodies', function() {\r\n    it('should return a list of melodies for a given progression', function() {\r\n      var chordProgression = [\"Gm\",\"Cm\",\"D\"];\r\n      var melodyList = AutoComposerMelody.getAllMelodies(chordProgression);\r\n\r\n      assert.equal(typeof melodyList[0] === 'string', false);\r\n    });\r\n\r\n    it('should return less melodies if filters are on', function() {\r\n      var chordProgression = [\"Gm\",\"Cm\",\"D\"];\r\n      var melodyListAll = AutoComposerMelody.getAllMelodies(chordProgression);\r\n      var melodyList = AutoComposerMelody.getMelodies(chordProgression);\r\n\r\n      assert(melodyListAll.length > melodyList.length, \"Filtered melody list is smaller than an unfiltered list\");\r\n      assert.equal(typeof melodyList[0] === 'string', false);\r\n    });\r\n\r\n    it('should return raw melodies as a string array', function() {\r\n      var chordProgression = [\"Gm\",\"Cm\",\"D\"];\r\n      var melodyList = AutoComposerMelody.getRawMelodies(chordProgression);\r\n\r\n      assert.equal(typeof melodyList[0] === 'string', true);\r\n    });\r\n  });\r\n\r\n  describe('#getBasicBassLine', function() {\r\n    it('should return a simple bassline for a melody', function() {\r\n      var chordProgression = [\"G\", \"Em\", \"C\", \"D\"];\r\n      var melody = \"B3 G4 E4 F#4\";\r\n      var melodyUnit = AutoComposerMelody.buildMelodyUnit(chordProgression, melody);\r\n\r\n      var resultBassline = AutoComposerMelody.getBasicBassLine(melodyUnit);\r\n      var expBassline = [\"G1\", \"E1\", \"C2\", \"D2\"];\r\n\r\n      assert.deepEqual(resultBassline, expBassline);\r\n    });\r\n  });\r\n\r\n  describe('#getAccompaniment', function() {\r\n    it('should return a simple accompaniment for a melody', function() {\r\n      var chordProgression = [\"G\", \"Em\", \"C\", \"D\"];\r\n      var melody = \"B3 G4 E4 F#4\";\r\n      var expAccompaniment = [\"D3\", \"B2\", \"G2\", \"A2\"];\r\n\r\n      var melodyUnit = AutoComposerMelody.buildMelodyUnit(chordProgression, melody);\r\n      var resultBassline = AutoComposerMelody.getAccompaniment(melodyUnit);\r\n\r\n      assert.deepEqual(resultBassline, expAccompaniment);\r\n    });\r\n  });\r\n});\r\n",
    "static": true,
    "longname": "test/autocomposer-melody.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 316,
    "kind": "testDescribe",
    "name": "describe14",
    "testId": 14,
    "memberof": "test/autocomposer-melody.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/autocomposer-melody.js~describe14",
    "access": null,
    "description": "AutoComposerMelody",
    "lineNumber": 24
  },
  {
    "__docId__": 317,
    "kind": "testDescribe",
    "name": "describe15",
    "testId": 15,
    "memberof": "test/autocomposer-melody.js~describe14",
    "testDepth": 1,
    "static": true,
    "longname": "test/autocomposer-melody.js~describe14.describe15",
    "access": null,
    "description": "#getAllChordTones",
    "lineNumber": 25
  },
  {
    "__docId__": 318,
    "kind": "testIt",
    "name": "it16",
    "testId": 16,
    "memberof": "test/autocomposer-melody.js~describe14.describe15",
    "testDepth": 2,
    "static": true,
    "longname": "test/autocomposer-melody.js~describe14.describe15.it16",
    "access": null,
    "description": "should return all chord tones in the range (inclusive)",
    "lineNumber": 26
  },
  {
    "__docId__": 319,
    "kind": "testDescribe",
    "name": "describe17",
    "testId": 17,
    "memberof": "test/autocomposer-melody.js~describe14",
    "testDepth": 1,
    "static": true,
    "longname": "test/autocomposer-melody.js~describe14.describe17",
    "access": null,
    "description": "#buildChordUnitList",
    "lineNumber": 38
  },
  {
    "__docId__": 320,
    "kind": "testIt",
    "name": "it18",
    "testId": 18,
    "memberof": "test/autocomposer-melody.js~describe14.describe17",
    "testDepth": 2,
    "static": true,
    "longname": "test/autocomposer-melody.js~describe14.describe17.it18",
    "access": null,
    "description": "should return a list of ChordUnits for a given progression",
    "lineNumber": 39
  },
  {
    "__docId__": 321,
    "kind": "testDescribe",
    "name": "describe19",
    "testId": 19,
    "memberof": "test/autocomposer-melody.js~describe14",
    "testDepth": 1,
    "static": true,
    "longname": "test/autocomposer-melody.js~describe14.describe19",
    "access": null,
    "description": "#buildMelodyUnit",
    "lineNumber": 63
  },
  {
    "__docId__": 322,
    "kind": "testIt",
    "name": "it20",
    "testId": 20,
    "memberof": "test/autocomposer-melody.js~describe14.describe19",
    "testDepth": 2,
    "static": true,
    "longname": "test/autocomposer-melody.js~describe14.describe19.it20",
    "access": null,
    "description": "should build a melody unit with metadata for each raw melody",
    "lineNumber": 64
  },
  {
    "__docId__": 323,
    "kind": "testDescribe",
    "name": "describe21",
    "testId": 21,
    "memberof": "test/autocomposer-melody.js~describe14",
    "testDepth": 1,
    "static": true,
    "longname": "test/autocomposer-melody.js~describe14.describe21",
    "access": null,
    "description": "#buildMelodyUnitList",
    "lineNumber": 93
  },
  {
    "__docId__": 324,
    "kind": "testIt",
    "name": "it22",
    "testId": 22,
    "memberof": "test/autocomposer-melody.js~describe14.describe21",
    "testDepth": 2,
    "static": true,
    "longname": "test/autocomposer-melody.js~describe14.describe21.it22",
    "access": null,
    "description": "should sort the output if specified",
    "lineNumber": 97
  },
  {
    "__docId__": 325,
    "kind": "testIt",
    "name": "it23",
    "testId": 23,
    "memberof": "test/autocomposer-melody.js~describe14.describe21",
    "testDepth": 2,
    "static": true,
    "longname": "test/autocomposer-melody.js~describe14.describe21.it23",
    "access": null,
    "description": "should limit the output if specified",
    "lineNumber": 103
  },
  {
    "__docId__": 326,
    "kind": "testDescribe",
    "name": "describe24",
    "testId": 24,
    "memberof": "test/autocomposer-melody.js~describe14",
    "testDepth": 1,
    "static": true,
    "longname": "test/autocomposer-melody.js~describe14.describe24",
    "access": null,
    "description": "#getMelodies",
    "lineNumber": 111
  },
  {
    "__docId__": 327,
    "kind": "testIt",
    "name": "it25",
    "testId": 25,
    "memberof": "test/autocomposer-melody.js~describe14.describe24",
    "testDepth": 2,
    "static": true,
    "longname": "test/autocomposer-melody.js~describe14.describe24.it25",
    "access": null,
    "description": "should return a list of melodies for a given progression",
    "lineNumber": 112
  },
  {
    "__docId__": 328,
    "kind": "testIt",
    "name": "it26",
    "testId": 26,
    "memberof": "test/autocomposer-melody.js~describe14.describe24",
    "testDepth": 2,
    "static": true,
    "longname": "test/autocomposer-melody.js~describe14.describe24.it26",
    "access": null,
    "description": "should return less melodies if filters are on",
    "lineNumber": 119
  },
  {
    "__docId__": 329,
    "kind": "testIt",
    "name": "it27",
    "testId": 27,
    "memberof": "test/autocomposer-melody.js~describe14.describe24",
    "testDepth": 2,
    "static": true,
    "longname": "test/autocomposer-melody.js~describe14.describe24.it27",
    "access": null,
    "description": "should return raw melodies as a string array",
    "lineNumber": 128
  },
  {
    "__docId__": 330,
    "kind": "testDescribe",
    "name": "describe28",
    "testId": 28,
    "memberof": "test/autocomposer-melody.js~describe14",
    "testDepth": 1,
    "static": true,
    "longname": "test/autocomposer-melody.js~describe14.describe28",
    "access": null,
    "description": "#getBasicBassLine",
    "lineNumber": 136
  },
  {
    "__docId__": 331,
    "kind": "testIt",
    "name": "it29",
    "testId": 29,
    "memberof": "test/autocomposer-melody.js~describe14.describe28",
    "testDepth": 2,
    "static": true,
    "longname": "test/autocomposer-melody.js~describe14.describe28.it29",
    "access": null,
    "description": "should return a simple bassline for a melody",
    "lineNumber": 137
  },
  {
    "__docId__": 332,
    "kind": "testDescribe",
    "name": "describe30",
    "testId": 30,
    "memberof": "test/autocomposer-melody.js~describe14",
    "testDepth": 1,
    "static": true,
    "longname": "test/autocomposer-melody.js~describe14.describe30",
    "access": null,
    "description": "#getAccompaniment",
    "lineNumber": 149
  },
  {
    "__docId__": 333,
    "kind": "testIt",
    "name": "it31",
    "testId": 31,
    "memberof": "test/autocomposer-melody.js~describe14.describe30",
    "testDepth": 2,
    "static": true,
    "longname": "test/autocomposer-melody.js~describe14.describe30.it31",
    "access": null,
    "description": "should return a simple accompaniment for a melody",
    "lineNumber": 150
  }
]